{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Protect your IoT Fleet You are a Security Engineer for a retail company that has fulfillment centers all across North America. Each fulfillment centers have thousands of IoT (Internet of Thing) devices measure the temperature of equipment. The Software Engineer teams decided to send telemetry data generated by IoT devices to the cloud for scalability. As a Security Engineer, you are tasked with securing the IoT devices from deployment through decommissioning. The QA team has provided simulated IoT devices for you to use in building those security controls. To achieve these requirements, you need to: Make sure devices security configuration is correct Use automation to detect devices compromised from bad actors Implement real-time notification solutions to react quickly to compromised devices. Terminology AWS IoT Core: A platform that enables you to connect devices to AWS Services and other devices, secure data and interactions, process and act upon device data. It also enables applications to interact with devices even when they are offline and also allows you to produce low-cost Alexa built-in devices. AWS IoT Thing: AWS IoT provides a registry that helps you manage things. A thing is a representation of a specific device or logical entity. It can be a physical device or sensor (for example, a light bulb or a switch on a wall). It can also be a logical entity like an instance of an application or physical entity that does not connect to AWS IoT but is related to other devices that do (for example, a car that has engine sensors or a control panel). IoT Thing Group: allow you to manage several things at once by categorizing them into groups X-509 Certificate: digital certificates that can be used to authenticate IoT devices IoT Core Policy: AWS IoT Core policies allow you to control access to the AWS IoT Core data plane. The AWS IoT Core data plane consists of operations that allow you to connect to the AWS IoT Core message broker, send and receive MQTT messages, and get or update a device's shadow. You can attach a policy to a Thing group and it is inherited by its child groups, and by all of the things in the group and in its child groups. This makes the control of permissions easy for large numbers of things. IoT Topics: When devices send messages to AWS IoT, it needs to to AWS IoT the topic name. AWS IoT looks at topic names to route messages. IoT Device Defender: a security service that allows you to audit the configuration of your devices, monitor connected devices to detect abnormal behavior, and mitigate security risks. IoT Device Defender Audit: An AWS IoT Device Defender audit looks at account- and device-related settings and policies to ensure security measures are in place. IoT Device Defender Mitigation Actions: You can use Mitigation Actions to mitigate issues that were found during an audit IoT Device Defender Detect: AWS IoT Device Defender Detect allows you to identify unusual behavior that might indicate a compromised device by monitoring the behavior of your devices. You can use a combination of cloud-side metrics (from AWS IoT) and device-side metrics (from agents you install on your devices) to detects change in devices Security profile: A security profile defines anomalous behaviors for a group of devices (a thing group) or for all devices in your account, and specifies which actions to take when an anomaly is detected. Behaviors: A behavior tells AWS IoT Device Defender Detect how to recognize when a device is doing something abnormal. Agenda 1. Module 1: Environment build This module walks you through the environment setup. This includes provisioning a CloudFormation stack (if you run this lab by yourself), validate IoT devices configuration, and check if telemetry data is sent to AWS IoT. 2. Module 2: Audit your IoT Fleet In Module 2, you create an AWS IoT Audit to check for misconfiguration for all of you devices. You will learn how to start an audit, and apply Mitigation Actions to remediate problem with devices have bad configurations 3. Module 3: Detect a compromised device using cloud-side metrics Module 3 shows you how to detect if devices are compromised and participate in wrong actions using cloud-side metrics from AWS IoT. You will simulate a scenerio when a device is sending significantly larger message size than it's normal message size. Using metrics provided by AWS IoT, you build an automation to detect this abnormal behavior. You then will build a Quarantine Thing Group, and move the bad device into this Thing Group to take away the device's permission to send data to AWS IoT. 4. Module 4: Detect a compromised device using device-side metrics In this module, you will learn how to capture metrics on your device by installing Device Defender agent on the device itself. Using these device-side metrics, you can detect if the device is changing in behavior. You will simulate a scenerio when a device is sending a significantly larger message size than the normal message size. Using metrics capture on your device, you will build automation to detect this abnormal behavior. You then will build a Quarantine Thing Group, and move the bad device into this Thing Group to take away device's permission to send data to AWS IoT. 5. Module 5: Send security alerts to your favourite messaging platform This extra-credit module shows you how to receive a real-time notification when your devices misbehave. You can choose to work with multiple messaging tools: Amazon Chime, Slack, or SMS","title":"Overview"},{"location":"#protect-your-iot-fleet","text":"You are a Security Engineer for a retail company that has fulfillment centers all across North America. Each fulfillment centers have thousands of IoT (Internet of Thing) devices measure the temperature of equipment. The Software Engineer teams decided to send telemetry data generated by IoT devices to the cloud for scalability. As a Security Engineer, you are tasked with securing the IoT devices from deployment through decommissioning. The QA team has provided simulated IoT devices for you to use in building those security controls. To achieve these requirements, you need to: Make sure devices security configuration is correct Use automation to detect devices compromised from bad actors Implement real-time notification solutions to react quickly to compromised devices.","title":"Protect your IoT Fleet"},{"location":"#terminology","text":"AWS IoT Core: A platform that enables you to connect devices to AWS Services and other devices, secure data and interactions, process and act upon device data. It also enables applications to interact with devices even when they are offline and also allows you to produce low-cost Alexa built-in devices. AWS IoT Thing: AWS IoT provides a registry that helps you manage things. A thing is a representation of a specific device or logical entity. It can be a physical device or sensor (for example, a light bulb or a switch on a wall). It can also be a logical entity like an instance of an application or physical entity that does not connect to AWS IoT but is related to other devices that do (for example, a car that has engine sensors or a control panel). IoT Thing Group: allow you to manage several things at once by categorizing them into groups X-509 Certificate: digital certificates that can be used to authenticate IoT devices IoT Core Policy: AWS IoT Core policies allow you to control access to the AWS IoT Core data plane. The AWS IoT Core data plane consists of operations that allow you to connect to the AWS IoT Core message broker, send and receive MQTT messages, and get or update a device's shadow. You can attach a policy to a Thing group and it is inherited by its child groups, and by all of the things in the group and in its child groups. This makes the control of permissions easy for large numbers of things. IoT Topics: When devices send messages to AWS IoT, it needs to to AWS IoT the topic name. AWS IoT looks at topic names to route messages. IoT Device Defender: a security service that allows you to audit the configuration of your devices, monitor connected devices to detect abnormal behavior, and mitigate security risks. IoT Device Defender Audit: An AWS IoT Device Defender audit looks at account- and device-related settings and policies to ensure security measures are in place. IoT Device Defender Mitigation Actions: You can use Mitigation Actions to mitigate issues that were found during an audit IoT Device Defender Detect: AWS IoT Device Defender Detect allows you to identify unusual behavior that might indicate a compromised device by monitoring the behavior of your devices. You can use a combination of cloud-side metrics (from AWS IoT) and device-side metrics (from agents you install on your devices) to detects change in devices Security profile: A security profile defines anomalous behaviors for a group of devices (a thing group) or for all devices in your account, and specifies which actions to take when an anomaly is detected. Behaviors: A behavior tells AWS IoT Device Defender Detect how to recognize when a device is doing something abnormal.","title":"Terminology"},{"location":"#agenda","text":"","title":"Agenda"},{"location":"#1-module-1-environment-build","text":"This module walks you through the environment setup. This includes provisioning a CloudFormation stack (if you run this lab by yourself), validate IoT devices configuration, and check if telemetry data is sent to AWS IoT.","title":"1. Module 1: Environment build"},{"location":"#2-module-2-audit-your-iot-fleet","text":"In Module 2, you create an AWS IoT Audit to check for misconfiguration for all of you devices. You will learn how to start an audit, and apply Mitigation Actions to remediate problem with devices have bad configurations","title":"2. Module 2: Audit your IoT Fleet"},{"location":"#3-module-3-detect-a-compromised-device-using-cloud-side-metrics","text":"Module 3 shows you how to detect if devices are compromised and participate in wrong actions using cloud-side metrics from AWS IoT. You will simulate a scenerio when a device is sending significantly larger message size than it's normal message size. Using metrics provided by AWS IoT, you build an automation to detect this abnormal behavior. You then will build a Quarantine Thing Group, and move the bad device into this Thing Group to take away the device's permission to send data to AWS IoT.","title":"3. Module 3: Detect a compromised device using cloud-side metrics"},{"location":"#4-module-4-detect-a-compromised-device-using-device-side-metrics","text":"In this module, you will learn how to capture metrics on your device by installing Device Defender agent on the device itself. Using these device-side metrics, you can detect if the device is changing in behavior. You will simulate a scenerio when a device is sending a significantly larger message size than the normal message size. Using metrics capture on your device, you will build automation to detect this abnormal behavior. You then will build a Quarantine Thing Group, and move the bad device into this Thing Group to take away device's permission to send data to AWS IoT.","title":"4. Module 4: Detect a compromised device using device-side metrics"},{"location":"#5-module-5-send-security-alerts-to-your-favourite-messaging-platform","text":"This extra-credit module shows you how to receive a real-time notification when your devices misbehave. You can choose to work with multiple messaging tools: Amazon Chime, Slack, or SMS","title":"5. Module 5: Send security alerts to your favourite messaging platform"},{"location":"Module%201%3A%20Environment%20build/","text":"Module 1: Environment build This module walks your through IoT environment setup for this workshop. You will need an AWS account. Depending on the scenerios below, expand one of the following dropdowns to start. Click here if you are at an AWS event where the Event Engine is being used If you are at an AWS Sponsored event, you will be provided with either an AWS account or a hash key for Event Engine. Environment setup has been completed for you. You don't need to perform any provisioning in this module. To get start, go to Available resources to check what are already provisioned. Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online) You will need to set up environment for this lab following these steps: Choose a region: sign in to your AWS Account. From AWS console home, choose a region that works best for you from the top right corner of the console. For example, Ohio or Oregon if you're in North America. Create a S3 bucket: You will use CloudFormation to provision neccesary resources, including multiple Lambda functions. You need to use a S3 bucket to store deployment packages of these Lambda functions. If you don't have a S3 bucket, create a new one. Or you can use an existing non-prod bucket. Download CloudFormation template setupinfra.yml and save it locally on your laptop/computer. Next you will create deployment package for 3 Lambda functions Create deployment package for Lambda function 'Device': This deployment package is for Lambda functions act as IoT Devices. To create deployment package, follow these steps 4.1. Clone this workshop github repo, change directory to 'Module 1: Environment build', navigate to folder 'device'. This folder should only have a python script device.py at the moment. 4.2. We will install neccessary dependecies for this python script. Under device folder, create a subfolder called Package. bash mkdir Package cd Package 4.3. Install these dependencies, choose Package as target folder bash pip install --target . AWSIoTPythonSDK boto3 requests 4.4. Create a zip archive of the dependencies in Package and store it in device folder. Run this command when you currently in Package folder bash zip -r9 ../device.zip . 4.5. Add python script device.py to the archive bash cd .. zip -g device.zip device.py 4.6. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create deployment package for Lambda function 'registerdevice': This deployment package is for a Lambda function that creates X.509 certificate, its private key and store it in AWS Secrets Manager. This function also creates an IoT Core policy and attachs it to X.509 certificate. To create deployment package, follow these steps 5.1. From directory 'Module 1: Environment build', navigate to folder 'registerDevice'. This folder should only have a javascript registerdevice.js at the moment. 5.2 Create a zip file from this javascript: bash zip registerdevice.zip registerdevice.js 5.3. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create deployment package for Lamdba function 'startaudit': this deployment package is for a Lambda function that start an on-demand Device Defender Audit 6.1. From directory 'Module 1: Environment build', navigate to folder 'startaudit'. This folder should only have a javascript startaudit.js at the moment. 6.2 Create a zip file from this javascript: bash zip startaudit.zip startaudit.js 6.3. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create a new CloudFormation stack to provision AWS resources: 7.1. From CloudFormation console, click Create stacks, With new resources (standard) 7.2. Choose Upload a new template , and upload the CloudFormation template that you download to your laptop/computer earlier in step 3. Click Next 7.3. Name this new CloudFormation stack. Under Parameter session, provide the name of the S3 bucket that you create in step 2. We recommend you to keep the default values of IoT Parameters for easy reference when you go through this workshop. You can provide values for these parameters if you are comfortable working with AWS IoT Thing and Topics. <img src=\"../images/s3parameter.png\"/> 7.4. Leave everything by default in Configure stack options . Click Next to go to review step 7.5. In Review , scroll down to The following resource(s) require capabilities: [AWS::IAM::ManagedPolicy] . Check the box next to I acknowledge that AWS CloudFormation might create IAM resources. . Click Create stack . The stack will take 5-10 minutes to complete. When the stack completes, move to Available resources Available resources Validate environment setup Check if your devices are sending data to AWS IoT 1. Available resources: If you are at an AWS Event, you should be provided an AWS Account with the resources below ready to use. Otherwise, you will need to use your AWS Account and provision resources by following \"Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online)\" at the beginning of this module Here is the list of resources: 3 IoT Devices: Device SensorDevice01 and SensorDevice02 are powered by Lambda functions. Device SensorDevice03 is a Cloud9 environment (so that you can access this device and install Device Defender agent later in this workshop) 3 AWS IoT Things named Thing01 , Thing02 , Thing03 3 AWS IoT Topic temperature-device-01 , temperature-device-02 , temperature-device-03 1 X.509 Certificate and it's private key stored in AWS Secrets Manager 1 AWS IoT Core Policy named as DevicePolicy-[CloudFormationStackname] 1 on-demand Audit 1 SNS topic named as BadIoTDevices-[CloudFormation stackname] . You will use this SNS topic to receive security realated alerts from AWS IoT Device Defender. IMPORTANT: You need to subscribe your email to this SNS topic to receive notifications. If this is the first time you subscribe to a SNS topic, follow this tutorial . After subscribe your email address, remember to CONFIRM YOUR SUBSCRIPTION Here is the architecture diagram for the environment setup: Let's move to the next step, where you can validate if the environment setup is correct 2. Validate environment setup 1. Check IoT Devices powered by Lambda functions In this workshop, we will use 2 Lambda functions acting as 2 seperate IoT Devices: SensorDevice01 and SensorDevice02. Each device will send temperature telemetry to AWS IoT every 10 seconds. To understand how the devices send data, let's look at the code of Lambda functions (writen in Python): From the AWS console home, click Lambda Once you're in Lambda management console, click Functions on the left side. Then click on SensorDevice01 (you can search for 'SensorDevice' name if you have too many funtions. Scroll down to Function code and you will see the Python code of this Lambda function. Here is a quick walk through what it does: a. First, the function will retrieve AWS IoT Endpoint to send telemetry data to. endpoint = iot.describe_endpoint(endpointType='iot:Data-ATS') endpointaddress = endpoint['endpointAddress'] b. Next, it checks if there is a X.509 device certificate, private key, and root CA certificate (for server authentication) available in /tmp ( local storage directory for Lambda function ). If not, it will retrieve these files from AWS Secrets Manager. IoT device needs these files to connect to AWS IoT. if os.path.isfile('/tmp/cert.pem'): print('/tmp/cert.pem is available') else: certpem = secretmanager.get_secret_value(SecretId='CertPem'+stackname) newcert = open('/tmp/cert.pem', 'w+') newcert.write(certpem['SecretString']) newcert.close() ....more code //download Amazon RootCA1 certificate if os.path.isfile('/tmp/rootca.pem'): print('/tmp/rootca.pem is available') else: url = 'https://www.amazontrust.com/repository/AmazonRootCA1.pem' newrootcapem = requests.get(url) open('/tmp/rootca.pem', 'wb').write(newrootcapem.content) c. Next, it connects with AWS IoT using AWS IoT Python SDK myMQTTClient = AWSIoTMQTTClient(devicename) myMQTTClient.configureEndpoint(endpointaddress, 8883) myMQTTClient.configureCredentials(\"/tmp/rootca.pem\", \"/tmp/private.key\", \"/tmp/cert.pem\") d. Finally, It generates random temperature telemetry data and sends it to AWS IoT Endpoint telemetrydata = round(random.uniform(15.1,29.9),2) #Connect to AWS IoT myMQTTClient.connect() myMQTTClient.publish(topicname, telemetrydata, 0) myMQTTClient.disconnect() 2. Check IoT Device powered by Cloud9 environment The third IoT device SensorDevice03 will be powered by a Cloud9 environment (so that you can log into this device later to instance Device Defender agent). To check if this Cloud9 environment is accessible, following these steps: From AWS Console home, click or search for Cloud9 Click on Your environments on the left side to view the list of environments. Select SensorDevice03 , and click Open IDE . Wait for a few minutes for the environment to be accesible. You need to check if this Cloud9 environment has source code of AWS Device Defender Agent - so that you can install this agent later in this workshop. From the terminal, run these linux command: cd ~/environment/workshop ls -l You should see the source code AWSIoTDeviceDefenderAgentSDK 3. AWS IoT Things Three AWS IoT Things Thing01, Thing02, Thing03 are already created for you. These Things are associated with a X.509 certificate (you'll learn more why using one certificate for multiple devices isn't a best practices in Module 2: Audit your IoT Fleet . When devices SensorDevice01,SensorDevice02, SensorDevice03 connect to AWS IoT, it needs to present this X.509 certificate and it's private key to prove that it is the Things registered with AWS IoT. You'll need to validate Thing01, Thing02, Thing03 configuration to understand how AWS IoT associate these Thing with devices. From AWS console home, click IoT Core to go to IoT management console. Click Manage, Things to view the list of IoT Things To get more information about a Thing, click on the Thing name (for example, Thing01 ). Each Thing need to use a X.509 certificate to authenticate with AWS IoT. To validate which certificate is associated to this Thing01 , go to Security . You should see a X.509 already associates with this Thing. This X.509 certificate need to be valid and activated. To check, click the certificate to get more information. You should see this certificate is issued by Amazon Web Services. It is currently Active with an Expiration date Remember that X.509 certificate is for Authentication. Now you need to validate device's Authorization - what actions this device is allowed to perform. AWS IoT use IoT Core Policy and IAM Policy. In this workshop, we will use IoT Core Policy to grant permission to devices. To understand how AWS use IAM Policy, take a look at this IAM policies document AWS IoT Core policies determine which operations are allowed. Operations are divided into two groups: data plane and control plane. Control plane API allows you to perform administrative tasks like creating or updating certificates, things, rules, and so on. Data plane API allows you send data to and receive data from AWS IoT Core. If you would like to dive deeper into AWS IoT Core policies, follow this AWS IoT Core Policies document To check which actions that your AWS IoT Thing can perform, you need to check the IoT Core Policies (or Policies in short) that associate with this Thing. Each Thing can have multiple Policies. A Policy can be attached to a X.509 certificate, or an AWS IoT Thing Group. In Module 3: Detect and response to a compromised device , you will create a Policy and attach it to a Thing Group. As for now you will check an existing Policy associates with X.509 certificate. Go back to Certificate Details (following step 3,4, and 5 above). Click Policies to see a Policy named DevicePolicy-[your-stack-name] attached to this X-509 certificate. The naming convention DevicePolicy-[your-stack-name] is to make sure each Policy created automatically by CloudFormation will have a unique name. Click on this Policy and you will see the policy document specifies priviledges of the request that your IoT Devices send to AWS IoT. What do you think about this Policy? What would you do differently to only give appropriate permisison for the Thing associated with this certificate? To get some idea, you can look at example AWS IoT policies here 3. Check if your devices are sending data to AWS IoT To check if you devices are connected to AWS IoT endpoint, go to Manage, Things Click on any Thing, for examble Thing01 . Click on Activity . Under Activity , you will see the history of Thing connectivity. Click on any entry, you can find more details about the thing name, and the cert that it uses to connect to AWS IoT endpoint. You can view the messages that devices publish to AWS IoT topics. To view these messages, go to AWS IoT MQTT client by following these steps From AWS IoT console, click on Test, Subscribe to a topic Type in the topic name temperature-device-01 that your IoT Devices send telemetry data to. In this workshop, the topic names will be \"temperature-device-01\", \"temperature-device-02\", \"temperature-device-03\". If you're running this workshop on your AWS account, and provide unique names for these topics when you use CloudFormation template to create resources, you will need to type in those unique topic names instead of temperature-device-01 Click \"Subscribe to topic\". Seeing the temperature records? Yay! Your devices are connected and sending data to AWS IoT. Now your next task is to audit all Things and devices to make sure there is no bad configuration. You can do so by moving to Module 2: Audit your IoT Fleet","title":"Module 1: Environment setup"},{"location":"Module%201%3A%20Environment%20build/#module-1-environment-build","text":"This module walks your through IoT environment setup for this workshop. You will need an AWS account. Depending on the scenerios below, expand one of the following dropdowns to start. Click here if you are at an AWS event where the Event Engine is being used If you are at an AWS Sponsored event, you will be provided with either an AWS account or a hash key for Event Engine. Environment setup has been completed for you. You don't need to perform any provisioning in this module. To get start, go to Available resources to check what are already provisioned. Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online) You will need to set up environment for this lab following these steps: Choose a region: sign in to your AWS Account. From AWS console home, choose a region that works best for you from the top right corner of the console. For example, Ohio or Oregon if you're in North America. Create a S3 bucket: You will use CloudFormation to provision neccesary resources, including multiple Lambda functions. You need to use a S3 bucket to store deployment packages of these Lambda functions. If you don't have a S3 bucket, create a new one. Or you can use an existing non-prod bucket. Download CloudFormation template setupinfra.yml and save it locally on your laptop/computer. Next you will create deployment package for 3 Lambda functions Create deployment package for Lambda function 'Device': This deployment package is for Lambda functions act as IoT Devices. To create deployment package, follow these steps 4.1. Clone this workshop github repo, change directory to 'Module 1: Environment build', navigate to folder 'device'. This folder should only have a python script device.py at the moment. 4.2. We will install neccessary dependecies for this python script. Under device folder, create a subfolder called Package. bash mkdir Package cd Package 4.3. Install these dependencies, choose Package as target folder bash pip install --target . AWSIoTPythonSDK boto3 requests 4.4. Create a zip archive of the dependencies in Package and store it in device folder. Run this command when you currently in Package folder bash zip -r9 ../device.zip . 4.5. Add python script device.py to the archive bash cd .. zip -g device.zip device.py 4.6. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create deployment package for Lambda function 'registerdevice': This deployment package is for a Lambda function that creates X.509 certificate, its private key and store it in AWS Secrets Manager. This function also creates an IoT Core policy and attachs it to X.509 certificate. To create deployment package, follow these steps 5.1. From directory 'Module 1: Environment build', navigate to folder 'registerDevice'. This folder should only have a javascript registerdevice.js at the moment. 5.2 Create a zip file from this javascript: bash zip registerdevice.zip registerdevice.js 5.3. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create deployment package for Lamdba function 'startaudit': this deployment package is for a Lambda function that start an on-demand Device Defender Audit 6.1. From directory 'Module 1: Environment build', navigate to folder 'startaudit'. This folder should only have a javascript startaudit.js at the moment. 6.2 Create a zip file from this javascript: bash zip startaudit.zip startaudit.js 6.3. Upload this zip file to your S3 bucket. Note: This deployment package need to be at the top level, and not in any folder of the S3 bucket Create a new CloudFormation stack to provision AWS resources: 7.1. From CloudFormation console, click Create stacks, With new resources (standard) 7.2. Choose Upload a new template , and upload the CloudFormation template that you download to your laptop/computer earlier in step 3. Click Next 7.3. Name this new CloudFormation stack. Under Parameter session, provide the name of the S3 bucket that you create in step 2. We recommend you to keep the default values of IoT Parameters for easy reference when you go through this workshop. You can provide values for these parameters if you are comfortable working with AWS IoT Thing and Topics. <img src=\"../images/s3parameter.png\"/> 7.4. Leave everything by default in Configure stack options . Click Next to go to review step 7.5. In Review , scroll down to The following resource(s) require capabilities: [AWS::IAM::ManagedPolicy] . Check the box next to I acknowledge that AWS CloudFormation might create IAM resources. . Click Create stack . The stack will take 5-10 minutes to complete. When the stack completes, move to Available resources Available resources Validate environment setup Check if your devices are sending data to AWS IoT","title":"Module 1: Environment build"},{"location":"Module%201%3A%20Environment%20build/#1-available-resources","text":"If you are at an AWS Event, you should be provided an AWS Account with the resources below ready to use. Otherwise, you will need to use your AWS Account and provision resources by following \"Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online)\" at the beginning of this module Here is the list of resources: 3 IoT Devices: Device SensorDevice01 and SensorDevice02 are powered by Lambda functions. Device SensorDevice03 is a Cloud9 environment (so that you can access this device and install Device Defender agent later in this workshop) 3 AWS IoT Things named Thing01 , Thing02 , Thing03 3 AWS IoT Topic temperature-device-01 , temperature-device-02 , temperature-device-03 1 X.509 Certificate and it's private key stored in AWS Secrets Manager 1 AWS IoT Core Policy named as DevicePolicy-[CloudFormationStackname] 1 on-demand Audit 1 SNS topic named as BadIoTDevices-[CloudFormation stackname] . You will use this SNS topic to receive security realated alerts from AWS IoT Device Defender. IMPORTANT: You need to subscribe your email to this SNS topic to receive notifications. If this is the first time you subscribe to a SNS topic, follow this tutorial . After subscribe your email address, remember to CONFIRM YOUR SUBSCRIPTION Here is the architecture diagram for the environment setup: Let's move to the next step, where you can validate if the environment setup is correct","title":"1. Available resources:"},{"location":"Module%201%3A%20Environment%20build/#2-validate-environment-setup","text":"","title":"2. Validate environment setup"},{"location":"Module%201%3A%20Environment%20build/#1-check-iot-devices-powered-by-lambda-functions","text":"In this workshop, we will use 2 Lambda functions acting as 2 seperate IoT Devices: SensorDevice01 and SensorDevice02. Each device will send temperature telemetry to AWS IoT every 10 seconds. To understand how the devices send data, let's look at the code of Lambda functions (writen in Python): From the AWS console home, click Lambda Once you're in Lambda management console, click Functions on the left side. Then click on SensorDevice01 (you can search for 'SensorDevice' name if you have too many funtions. Scroll down to Function code and you will see the Python code of this Lambda function. Here is a quick walk through what it does: a. First, the function will retrieve AWS IoT Endpoint to send telemetry data to. endpoint = iot.describe_endpoint(endpointType='iot:Data-ATS') endpointaddress = endpoint['endpointAddress'] b. Next, it checks if there is a X.509 device certificate, private key, and root CA certificate (for server authentication) available in /tmp ( local storage directory for Lambda function ). If not, it will retrieve these files from AWS Secrets Manager. IoT device needs these files to connect to AWS IoT. if os.path.isfile('/tmp/cert.pem'): print('/tmp/cert.pem is available') else: certpem = secretmanager.get_secret_value(SecretId='CertPem'+stackname) newcert = open('/tmp/cert.pem', 'w+') newcert.write(certpem['SecretString']) newcert.close() ....more code //download Amazon RootCA1 certificate if os.path.isfile('/tmp/rootca.pem'): print('/tmp/rootca.pem is available') else: url = 'https://www.amazontrust.com/repository/AmazonRootCA1.pem' newrootcapem = requests.get(url) open('/tmp/rootca.pem', 'wb').write(newrootcapem.content) c. Next, it connects with AWS IoT using AWS IoT Python SDK myMQTTClient = AWSIoTMQTTClient(devicename) myMQTTClient.configureEndpoint(endpointaddress, 8883) myMQTTClient.configureCredentials(\"/tmp/rootca.pem\", \"/tmp/private.key\", \"/tmp/cert.pem\") d. Finally, It generates random temperature telemetry data and sends it to AWS IoT Endpoint telemetrydata = round(random.uniform(15.1,29.9),2) #Connect to AWS IoT myMQTTClient.connect() myMQTTClient.publish(topicname, telemetrydata, 0) myMQTTClient.disconnect()","title":"1. Check IoT Devices powered by Lambda functions"},{"location":"Module%201%3A%20Environment%20build/#2-check-iot-device-powered-by-cloud9-environment","text":"The third IoT device SensorDevice03 will be powered by a Cloud9 environment (so that you can log into this device later to instance Device Defender agent). To check if this Cloud9 environment is accessible, following these steps: From AWS Console home, click or search for Cloud9 Click on Your environments on the left side to view the list of environments. Select SensorDevice03 , and click Open IDE . Wait for a few minutes for the environment to be accesible. You need to check if this Cloud9 environment has source code of AWS Device Defender Agent - so that you can install this agent later in this workshop. From the terminal, run these linux command: cd ~/environment/workshop ls -l You should see the source code AWSIoTDeviceDefenderAgentSDK","title":"2. Check IoT Device powered by Cloud9 environment"},{"location":"Module%201%3A%20Environment%20build/#3-aws-iot-things","text":"Three AWS IoT Things Thing01, Thing02, Thing03 are already created for you. These Things are associated with a X.509 certificate (you'll learn more why using one certificate for multiple devices isn't a best practices in Module 2: Audit your IoT Fleet . When devices SensorDevice01,SensorDevice02, SensorDevice03 connect to AWS IoT, it needs to present this X.509 certificate and it's private key to prove that it is the Things registered with AWS IoT. You'll need to validate Thing01, Thing02, Thing03 configuration to understand how AWS IoT associate these Thing with devices. From AWS console home, click IoT Core to go to IoT management console. Click Manage, Things to view the list of IoT Things To get more information about a Thing, click on the Thing name (for example, Thing01 ). Each Thing need to use a X.509 certificate to authenticate with AWS IoT. To validate which certificate is associated to this Thing01 , go to Security . You should see a X.509 already associates with this Thing. This X.509 certificate need to be valid and activated. To check, click the certificate to get more information. You should see this certificate is issued by Amazon Web Services. It is currently Active with an Expiration date Remember that X.509 certificate is for Authentication. Now you need to validate device's Authorization - what actions this device is allowed to perform. AWS IoT use IoT Core Policy and IAM Policy. In this workshop, we will use IoT Core Policy to grant permission to devices. To understand how AWS use IAM Policy, take a look at this IAM policies document AWS IoT Core policies determine which operations are allowed. Operations are divided into two groups: data plane and control plane. Control plane API allows you to perform administrative tasks like creating or updating certificates, things, rules, and so on. Data plane API allows you send data to and receive data from AWS IoT Core. If you would like to dive deeper into AWS IoT Core policies, follow this AWS IoT Core Policies document To check which actions that your AWS IoT Thing can perform, you need to check the IoT Core Policies (or Policies in short) that associate with this Thing. Each Thing can have multiple Policies. A Policy can be attached to a X.509 certificate, or an AWS IoT Thing Group. In Module 3: Detect and response to a compromised device , you will create a Policy and attach it to a Thing Group. As for now you will check an existing Policy associates with X.509 certificate. Go back to Certificate Details (following step 3,4, and 5 above). Click Policies to see a Policy named DevicePolicy-[your-stack-name] attached to this X-509 certificate. The naming convention DevicePolicy-[your-stack-name] is to make sure each Policy created automatically by CloudFormation will have a unique name. Click on this Policy and you will see the policy document specifies priviledges of the request that your IoT Devices send to AWS IoT. What do you think about this Policy? What would you do differently to only give appropriate permisison for the Thing associated with this certificate? To get some idea, you can look at example AWS IoT policies here","title":"3. AWS IoT Things"},{"location":"Module%201%3A%20Environment%20build/#3-check-if-your-devices-are-sending-data-to-aws-iot","text":"To check if you devices are connected to AWS IoT endpoint, go to Manage, Things Click on any Thing, for examble Thing01 . Click on Activity . Under Activity , you will see the history of Thing connectivity. Click on any entry, you can find more details about the thing name, and the cert that it uses to connect to AWS IoT endpoint. You can view the messages that devices publish to AWS IoT topics. To view these messages, go to AWS IoT MQTT client by following these steps From AWS IoT console, click on Test, Subscribe to a topic Type in the topic name temperature-device-01 that your IoT Devices send telemetry data to. In this workshop, the topic names will be \"temperature-device-01\", \"temperature-device-02\", \"temperature-device-03\". If you're running this workshop on your AWS account, and provide unique names for these topics when you use CloudFormation template to create resources, you will need to type in those unique topic names instead of temperature-device-01 Click \"Subscribe to topic\". Seeing the temperature records? Yay! Your devices are connected and sending data to AWS IoT. Now your next task is to audit all Things and devices to make sure there is no bad configuration. You can do so by moving to Module 2: Audit your IoT Fleet","title":"3. Check if your devices are sending data to AWS IoT"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/","text":"Module 2: Audit your IoT Fleet In Module 1, you validated the environment setup for your IoT devices. Your next task is to regularly audit these devices to detect any drifts from security requirements for device configuration. As a busy Security Engineer, you are looking for the opportunity to automate the migration and auditing of thousands of IoT devices. This module will show you how to accomplish automation for audit and mitigation actions. Audit your IoT Fleet 1.1 Check Audit settings 1.2 Start an On-Demand Audit Mitigate noncompliant findings 2.1 Define mitigation actions 2.2 Apply mitigation actions to noncompliant findings 1. Audit your IoT Fleet AWS provides a service called AWS IoT Device Defender to help you look at your account and device settings to ensure security measures are in place. Device Defender provides a feature called Audit . An Audit can help you detect any drift from security best practices or access policies. Audit provides 14 type of checks . You can configure audit settings in your AWS account to choose which checks will be available when you set up audits. These Settings are effective at regional level. That means, settings in region A will not affect region B. An Audit Settings has 3 parts: Service permissions: you will need to allow Device Defender to run Audit against your IoT devices. You do so by using an IAM policies to manage permissions. Enable Audit checks: you select checks to make it available for audits. You can enable or disable these at anytime. Disabling a check means that Device Defender will not include that type of check when it runs an Audit. SNS alerts: This optional setting lets you choose a SNS topic to receive alerts from Device Defender. Alerts are always displayed in the AWS IoT console. 1.1 Check Audit Settings In this module, you will run all of the checks for your IoT devices. You will need to validate if all checks are enabled in settings. Leave all the checks enabled. Depending on the scenerio below, expand one of the following dropdowns to start. Option 1: Click here if you're at an AWS event where the Event Engine is being used or you ran the CloudFormation template in Module 1 in your AWS account 1. If you are at an AWS Sponsored event, an on-demand Audit was created in advanced for you to make sure you can see what Audit results look like if you can't create an Audit during the event. Thus Audit Settings are already created for you. You can follow steps below to validate Settings 2. Sign in to AWS Account. From the AWS console home, click **IoT Device Defender** to go to IoT console. (You can search this service in the search box if you don't see it) 3. On the left side, click **Defend, Settings** to view current settings 4. Under **Service permissions**, you will see an IAM role in a format [CloudFormation-stack-name]-IoTAuditRole-[random-value] that gives permission to Device Defender to run audits. This role was create in advance for you using CloudFormation. This IAM role has 1 AWS managed policy **AWSIoTDeviceDefenderAudit** attached to it. Here is what this role looks like in IAM console: 5. Under **Enable Audit checks**, you will see the list of enabled checks, severity of each checks, and what resources this checks will audit against. Click on the question mark next to the check name to learn more what it does. 6. To disable any checks, click on the box next to it and click **Disable**. For example, this is what it looks like when you disable 'Logging disabled' and 'CA certificate expiring' check: 7. Disabled checks will be listed under **Disabled Audit checks session**. To enable the checks again, check the box next to check name and click **Enable** 7. The final section of Settings is **SNS alerts**. You need to enable SNS alerts to receive audit related alerts from Device Defender. Click on **Edit, Enabled** 8. Under **Topic**, select SNS topic **BadIoTDevices- ** create previously in [Module 1](/Module%201:%20Environment%20build#available-resources). 9. Under **Role**, select IAM role with this naming convention [CloudFormation-stack-name]-SNSTopicRole-[random-value]. This role is create by CloudFormation. It has one AWS managed policy **AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction** 10. When you're ready, click **Update** to enable SNS alerts. Don't forget to subscribe to this SNS topic to receive noncompliant findings notification when an Audit completes You have completed checking setting for Device Defender Audit. Go to next session **1.2 Start an On-Demand Audit** to create and start an Audit. Option 2: Click here if you manually configure Audit Settings very first time If you finished Module 1 before working on this module, an on-demand Device Defender Audit was created in advance. This option will not be suitable for you. Device Defender will prompt you to configure Audit Settings if this is the first time you [run an Audit](https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-HowToProceed.html). To use AWS IoT console to start an Audit, follow these steps: 1. Sign in to AWS Account. From AWS console home, click on IoT Device Defender to go to IoT console 2. On the left side of IoT console, click **Defend, Audit, Get started with an audit** 3. You will go through 3 steps to configure settings for Device Defender Audit. Click **Next** to start first steps **Review permissions** 4. In this step, you need to grant Device Defender Audits permisison to run audit against your IoT resources and policies by using IAM Role. This IAM role needs to have AWS managed policy **AWSIoTDeviceDefenderAudit**. You can create this IAM role in advance or click **Create Role** so that Device Defender can create the role for you. Click **Next** to go to **Select checks** 5. Select the checks you want to enable, and click **Next** to go to the next step, **Configure SNS** 6. This optional step let you choose which SNS topic will receive alerts from Device Defender. If you choose **Enabled**, you need to provide SNS topic name and IAM role that allow Device Defender to send alerts to that SNS topic. This IAM role needs to have AWS managed policy **AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction**. 7. Click **Enable Audit** to start your very first Audit. Note that this first Audit is a daily audit - meaning it will run every day at specific time decided by Device Defender. To create different type of Audit (on-demand, monthly,...), click **Defend, Audit, Schedules, Create** 1.2 Start an On-Demand Audit When you create a new Audit, you can choose how often the audit should run: On-Demand: Audit starts immediately with no repeats. This option is helpful for ad-hoc audit. Daily: scheduled audit runs every day. The actual start time of each audit is determined by the system. Weekly: scheduled audit runs every week on the day of your choice. The actual start time of each audit is determined by the system. Bi-Weekly: scheduled audit runs every two week on the day of your choice. The actual start time of each audit is determined by the system. Monthly: scheduled audit runs every month on the day of your choice. The actual start time of each audit is determined by the system. To start an audit immediately, you create an On-Demand Audit by following these steps: Sign in to AWS Account. From AWS console home, search for IoT Device Defender and click on it to go to IoT console From the IoT console, click Defend , Audit , Schedules . Click Create button on the top right to create a new Audit. You will see the list of eligible checks can be included in this Audit. If you disable any checks in Audit Settings, you will not see that checks in this list. In this workshop, you select all of the checks (should be 14 checks in total) Click the drop down list under Set schedule . Choose Run audit now(once) . Then click Create to start the Audit immediately. Note that there is no option to name an On-Demand Audit. To view Audit's status, go to Defend , Audit , Results . All On-Demand Audit will have the name On-demand. When Audit completes, Device Defender sends you an email (you need to subscribe to SNS topic in session 1.1 , Option 1, step 11) To view Audit's results, click on the name of the Audit On-demand Under Non-compliant checks , you should see 3 noncompliant findings under Check name : Device certificate shared : indicates multiple, concurrent connections use the same X.509 certificate to authenticate with AWS IoT. Each device should have a unique certificate to authenticate with AWS IoT. When multiple devices use the same certificate, this might indicate that a device has been compromised. Its identity might have been cloned to further compromise the system. IoT policies overly permissive : indicates an AWS IoT policy gives permissions that are too broad or unrestricted. In general, a policy for a device should grant access to resources associated with just that device and no or very few other devices. Logging disabled : indicates AWS IoT logs are not enabled in Amazon CloudWatch. AWS IoT logs in CloudWatch provide visibility into behaviors in AWS IoT, including authentication failures and unexpected connects and disconnects that might indicate that a device has been compromised. Helpful tip: this Audit Checks document provides instructions to help you fix noncompliant findings for 14 checks. To view which resources associate which each findings, click on the check name. In this module, let's work on fixing Device certificate shared findings. Click on this finding to find out which device certificate are being shared, and which IoT Things are involved. You will see the Certificate Id that is being shared. To find out which IoT Things are sharing this cert, go to Secure, Certificates . Click the Certificate Id that you see in previous step to view details of this certificate. Now click on Things to view the list of IoT Things are using this certificate Now you know exactly that 3 Things Thing01, Thing02, Thing03 are using the same X.509 to connect to AWS IoT. This is not a good configuration. Move to the next step to mitigate this noncompliant finding. 2. Mitigate noncompliant findings There are multiple methods to automate remediation for noncompliant IoT devices after running Device Defender Audit. You can write scripts/tools to use AWS CLI/SDK to take actions on noncompliant device when you receive notification from AWS Device Defender. Another option is to use AWS Device Management to push updates/patches to your devices at scale. In this module, we will use a different approach: use Device Defender's Mitigation Actions feature to fix noncompliant devices. 2.1 Define mitigation actions AWS IoT Device Defender provides predefined actions for the different audit checks. You need to configure those actions for your AWS account and then apply them to a set of findings. Sign in to AWS Account. From AWS console home, go to IoT Device Defender. From IoT console, click Defend , Mitigation Actions . From the top right conner, click Create to create a new Mitigation Actions. Provide a name for this action. You can name it Update-device-certificate . Now you need to choose which action Device Defender will perfom. Click on the drop down list Action type to see the list of supported actions . Since we want to remediate noncompliant finding Device certificate shared , choose Update device certificate action type to deactivate the certificate. You need to give Device Defender permisison to perform this mitigation action. Under Permission , expand Permissions and Trust relationships to look at what permission and trust relationship is required. To create a new IAM role with these permisison, you need to create a new one. Click Create Role and enter a role name. Then click Create role . This role will have AWS managed policy AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction Under Parameters , you should see Deactivate is choosen as the action Device Defender should take. Note: currently Action Type Update device certificate only has one Action - Deactivate. Leave everything else as it is and click Save . Now we can apply this mitigation actions to the audit findings. 2.2 Apply mitigation actions to noncompliant findings After we define mitigation actions for Device Defender, you need to apply these actions to noncompliant findings, so that Device Defender can start remediation. From left side of IoT console, navigate to Audit , Results . You should see multiple On-demand audit results. The latest audit should be the one you started on step 1.2 Start an On-Demand Audit . Click on this On-demand audit to view the list of findings. Under Non-compliant checks , click on Device certificate shared to go to findings details. You should see the cerfiticate ID associated to this finding. To apply mitigation actions, check the box next to finding ID, and click Start Mitigation Action on the top right corner. Give a name for this task, then click Select options for IoT policies overly permissive to see the drop down lists of actions, and choose the mitigation action you created in the previous step. Then click Confirm To view the status of mitigation actions task, click on Defend , Action results Since we use mitigation action Update device certificate , Device Defender will deactivate the Certificate. To double check, go to Secure , Certificates . You should see the certificate is Inactivate . Note: If you will work on next module Module 3: Detect a compromised device using cloud-side metrics , then you will need to re-activate this certificate. Congratulations! You have mitigated a noncompliant findings in your device configuration. Your next task is to detect if a devices are being used for wrong purpose (for example, particiate in a DDoS attack). Move to Module 3: Detect a compromised device using cloud-side metrics to learn what you can do to accomplish this task.","title":"Module 2: Audit your IoT Fleet"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#module-2-audit-your-iot-fleet","text":"In Module 1, you validated the environment setup for your IoT devices. Your next task is to regularly audit these devices to detect any drifts from security requirements for device configuration. As a busy Security Engineer, you are looking for the opportunity to automate the migration and auditing of thousands of IoT devices. This module will show you how to accomplish automation for audit and mitigation actions. Audit your IoT Fleet 1.1 Check Audit settings 1.2 Start an On-Demand Audit Mitigate noncompliant findings 2.1 Define mitigation actions 2.2 Apply mitigation actions to noncompliant findings","title":"Module 2: Audit your IoT Fleet"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#1-audit-your-iot-fleet","text":"AWS provides a service called AWS IoT Device Defender to help you look at your account and device settings to ensure security measures are in place. Device Defender provides a feature called Audit . An Audit can help you detect any drift from security best practices or access policies. Audit provides 14 type of checks . You can configure audit settings in your AWS account to choose which checks will be available when you set up audits. These Settings are effective at regional level. That means, settings in region A will not affect region B. An Audit Settings has 3 parts: Service permissions: you will need to allow Device Defender to run Audit against your IoT devices. You do so by using an IAM policies to manage permissions. Enable Audit checks: you select checks to make it available for audits. You can enable or disable these at anytime. Disabling a check means that Device Defender will not include that type of check when it runs an Audit. SNS alerts: This optional setting lets you choose a SNS topic to receive alerts from Device Defender. Alerts are always displayed in the AWS IoT console.","title":"1. Audit your IoT Fleet"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#11-check-audit-settings","text":"In this module, you will run all of the checks for your IoT devices. You will need to validate if all checks are enabled in settings. Leave all the checks enabled. Depending on the scenerio below, expand one of the following dropdowns to start. Option 1: Click here if you're at an AWS event where the Event Engine is being used or you ran the CloudFormation template in Module 1 in your AWS account 1. If you are at an AWS Sponsored event, an on-demand Audit was created in advanced for you to make sure you can see what Audit results look like if you can't create an Audit during the event. Thus Audit Settings are already created for you. You can follow steps below to validate Settings 2. Sign in to AWS Account. From the AWS console home, click **IoT Device Defender** to go to IoT console. (You can search this service in the search box if you don't see it) 3. On the left side, click **Defend, Settings** to view current settings 4. Under **Service permissions**, you will see an IAM role in a format [CloudFormation-stack-name]-IoTAuditRole-[random-value] that gives permission to Device Defender to run audits. This role was create in advance for you using CloudFormation. This IAM role has 1 AWS managed policy **AWSIoTDeviceDefenderAudit** attached to it. Here is what this role looks like in IAM console: 5. Under **Enable Audit checks**, you will see the list of enabled checks, severity of each checks, and what resources this checks will audit against. Click on the question mark next to the check name to learn more what it does. 6. To disable any checks, click on the box next to it and click **Disable**. For example, this is what it looks like when you disable 'Logging disabled' and 'CA certificate expiring' check: 7. Disabled checks will be listed under **Disabled Audit checks session**. To enable the checks again, check the box next to check name and click **Enable** 7. The final section of Settings is **SNS alerts**. You need to enable SNS alerts to receive audit related alerts from Device Defender. Click on **Edit, Enabled** 8. Under **Topic**, select SNS topic **BadIoTDevices- ** create previously in [Module 1](/Module%201:%20Environment%20build#available-resources). 9. Under **Role**, select IAM role with this naming convention [CloudFormation-stack-name]-SNSTopicRole-[random-value]. This role is create by CloudFormation. It has one AWS managed policy **AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction** 10. When you're ready, click **Update** to enable SNS alerts. Don't forget to subscribe to this SNS topic to receive noncompliant findings notification when an Audit completes You have completed checking setting for Device Defender Audit. Go to next session **1.2 Start an On-Demand Audit** to create and start an Audit. Option 2: Click here if you manually configure Audit Settings very first time If you finished Module 1 before working on this module, an on-demand Device Defender Audit was created in advance. This option will not be suitable for you. Device Defender will prompt you to configure Audit Settings if this is the first time you [run an Audit](https://docs.aws.amazon.com/iot/latest/developerguide/device-defender-HowToProceed.html). To use AWS IoT console to start an Audit, follow these steps: 1. Sign in to AWS Account. From AWS console home, click on IoT Device Defender to go to IoT console 2. On the left side of IoT console, click **Defend, Audit, Get started with an audit** 3. You will go through 3 steps to configure settings for Device Defender Audit. Click **Next** to start first steps **Review permissions** 4. In this step, you need to grant Device Defender Audits permisison to run audit against your IoT resources and policies by using IAM Role. This IAM role needs to have AWS managed policy **AWSIoTDeviceDefenderAudit**. You can create this IAM role in advance or click **Create Role** so that Device Defender can create the role for you. Click **Next** to go to **Select checks** 5. Select the checks you want to enable, and click **Next** to go to the next step, **Configure SNS** 6. This optional step let you choose which SNS topic will receive alerts from Device Defender. If you choose **Enabled**, you need to provide SNS topic name and IAM role that allow Device Defender to send alerts to that SNS topic. This IAM role needs to have AWS managed policy **AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction**. 7. Click **Enable Audit** to start your very first Audit. Note that this first Audit is a daily audit - meaning it will run every day at specific time decided by Device Defender. To create different type of Audit (on-demand, monthly,...), click **Defend, Audit, Schedules, Create**","title":"1.1 Check Audit Settings"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#12-start-an-on-demand-audit","text":"When you create a new Audit, you can choose how often the audit should run: On-Demand: Audit starts immediately with no repeats. This option is helpful for ad-hoc audit. Daily: scheduled audit runs every day. The actual start time of each audit is determined by the system. Weekly: scheduled audit runs every week on the day of your choice. The actual start time of each audit is determined by the system. Bi-Weekly: scheduled audit runs every two week on the day of your choice. The actual start time of each audit is determined by the system. Monthly: scheduled audit runs every month on the day of your choice. The actual start time of each audit is determined by the system. To start an audit immediately, you create an On-Demand Audit by following these steps: Sign in to AWS Account. From AWS console home, search for IoT Device Defender and click on it to go to IoT console From the IoT console, click Defend , Audit , Schedules . Click Create button on the top right to create a new Audit. You will see the list of eligible checks can be included in this Audit. If you disable any checks in Audit Settings, you will not see that checks in this list. In this workshop, you select all of the checks (should be 14 checks in total) Click the drop down list under Set schedule . Choose Run audit now(once) . Then click Create to start the Audit immediately. Note that there is no option to name an On-Demand Audit. To view Audit's status, go to Defend , Audit , Results . All On-Demand Audit will have the name On-demand. When Audit completes, Device Defender sends you an email (you need to subscribe to SNS topic in session 1.1 , Option 1, step 11) To view Audit's results, click on the name of the Audit On-demand Under Non-compliant checks , you should see 3 noncompliant findings under Check name : Device certificate shared : indicates multiple, concurrent connections use the same X.509 certificate to authenticate with AWS IoT. Each device should have a unique certificate to authenticate with AWS IoT. When multiple devices use the same certificate, this might indicate that a device has been compromised. Its identity might have been cloned to further compromise the system. IoT policies overly permissive : indicates an AWS IoT policy gives permissions that are too broad or unrestricted. In general, a policy for a device should grant access to resources associated with just that device and no or very few other devices. Logging disabled : indicates AWS IoT logs are not enabled in Amazon CloudWatch. AWS IoT logs in CloudWatch provide visibility into behaviors in AWS IoT, including authentication failures and unexpected connects and disconnects that might indicate that a device has been compromised. Helpful tip: this Audit Checks document provides instructions to help you fix noncompliant findings for 14 checks. To view which resources associate which each findings, click on the check name. In this module, let's work on fixing Device certificate shared findings. Click on this finding to find out which device certificate are being shared, and which IoT Things are involved. You will see the Certificate Id that is being shared. To find out which IoT Things are sharing this cert, go to Secure, Certificates . Click the Certificate Id that you see in previous step to view details of this certificate. Now click on Things to view the list of IoT Things are using this certificate Now you know exactly that 3 Things Thing01, Thing02, Thing03 are using the same X.509 to connect to AWS IoT. This is not a good configuration. Move to the next step to mitigate this noncompliant finding.","title":"1.2 Start an On-Demand Audit"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#2-mitigate-noncompliant-findings","text":"There are multiple methods to automate remediation for noncompliant IoT devices after running Device Defender Audit. You can write scripts/tools to use AWS CLI/SDK to take actions on noncompliant device when you receive notification from AWS Device Defender. Another option is to use AWS Device Management to push updates/patches to your devices at scale. In this module, we will use a different approach: use Device Defender's Mitigation Actions feature to fix noncompliant devices.","title":"2. Mitigate noncompliant findings"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#21-define-mitigation-actions","text":"AWS IoT Device Defender provides predefined actions for the different audit checks. You need to configure those actions for your AWS account and then apply them to a set of findings. Sign in to AWS Account. From AWS console home, go to IoT Device Defender. From IoT console, click Defend , Mitigation Actions . From the top right conner, click Create to create a new Mitigation Actions. Provide a name for this action. You can name it Update-device-certificate . Now you need to choose which action Device Defender will perfom. Click on the drop down list Action type to see the list of supported actions . Since we want to remediate noncompliant finding Device certificate shared , choose Update device certificate action type to deactivate the certificate. You need to give Device Defender permisison to perform this mitigation action. Under Permission , expand Permissions and Trust relationships to look at what permission and trust relationship is required. To create a new IAM role with these permisison, you need to create a new one. Click Create Role and enter a role name. Then click Create role . This role will have AWS managed policy AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction Under Parameters , you should see Deactivate is choosen as the action Device Defender should take. Note: currently Action Type Update device certificate only has one Action - Deactivate. Leave everything else as it is and click Save . Now we can apply this mitigation actions to the audit findings.","title":"2.1 Define mitigation actions"},{"location":"Module%202%3A%20Audit%20your%20IoT%20Fleet/#22-apply-mitigation-actions-to-noncompliant-findings","text":"After we define mitigation actions for Device Defender, you need to apply these actions to noncompliant findings, so that Device Defender can start remediation. From left side of IoT console, navigate to Audit , Results . You should see multiple On-demand audit results. The latest audit should be the one you started on step 1.2 Start an On-Demand Audit . Click on this On-demand audit to view the list of findings. Under Non-compliant checks , click on Device certificate shared to go to findings details. You should see the cerfiticate ID associated to this finding. To apply mitigation actions, check the box next to finding ID, and click Start Mitigation Action on the top right corner. Give a name for this task, then click Select options for IoT policies overly permissive to see the drop down lists of actions, and choose the mitigation action you created in the previous step. Then click Confirm To view the status of mitigation actions task, click on Defend , Action results Since we use mitigation action Update device certificate , Device Defender will deactivate the Certificate. To double check, go to Secure , Certificates . You should see the certificate is Inactivate . Note: If you will work on next module Module 3: Detect a compromised device using cloud-side metrics , then you will need to re-activate this certificate. Congratulations! You have mitigated a noncompliant findings in your device configuration. Your next task is to detect if a devices are being used for wrong purpose (for example, particiate in a DDoS attack). Move to Module 3: Detect a compromised device using cloud-side metrics to learn what you can do to accomplish this task.","title":"2.2 Apply mitigation actions to noncompliant findings"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/","text":"Module 3: Detect a compromised device using cloud-side metrics In Module 2, you learned how to set up automation to audit devices configuration and implement mitigation actions. With additional security requirements from your IT organization, you need to have a solution in place to detect unusual behaviors of IoT devices, which can indicate that devices are compromised and participate in bad activities (for example, participate in a DDoS attack). You also need to find a solution to quickly response to this changes in device's behaviors. Becuase these IoT devices are used to send temperature telemetry, you identify one behavior indicates that a device is compromised: sending very large message compared to the regular message, which only has temperature telemetry. This module will walk you through neccessary steps to use metrics collected by AWS IoT (cloud-side metrics) to detect a compromised devices. Define unusual behaviors of your devices Respond to a violation Simulate a compromised device 1. Define unusual behaviors of your devices Your task is to implement a solution to detect unusual behaviors of IoT devices. How do you know if a device acts differently than its regular behavior? You need to have metrics related to the device's activities, and you need to define when the value of each metric is considered outside of regularity. AWS IoT Device Defender Detect monitor cloud-side metrics to detect abnormal behaviors (such as the number of authorization failures, or the number or size of messages a device sends or receives through AWS IoT). However, you need to tell Device Defender when these metrics aren't normal. To do that, you need to create a Security Profile . A security profile defines abnomal behaviors for a group of devices (a thing group) or for all devices in your account, and specifies what actions to take when an anomaly is detected. In this case, you will create a Security Profile to allow Device Defender to monitor the message size of all three devices. The Software Development Team didn't share with you average message size of each message. But Device Defender can use statisticalThreshold to detect if incoming messages are larger then the average message size. Sign in to your AWS account. From AWS console home, go to IoT console On the left side of IoT Console, Click Defend, Detect, Security Profiles, Create your first security profile . Name this security profile as DetectLargeMessageSize . Under Behaviors , create a behavior named LargeMessageSize . We ask Device Defender to observe message size and alert us it transmits messages whose cumulative size is more than 1000bytes in a minute. Click on drop down list under Metric , and choose metric Message Size . Choose Check Type as Statistical Threshold . For Operator , choose Greater than . Specify p50 for Statistical Threshold . That means, the criteria to trigger alert is when the incoming message size is larger than the 50% of all measurements. Choose 5 minutes for Duration . For a Statistical Threshold check type, this is the time window during which metrics are collected from all devices to determine the statistical ranking of the data from an individual device. For Datapoints to Alarm , specify 1 . If a device is in violation of this behavior for 1 datapoints, an alarm occurs. For Datapoints to Clear , specify 1 . If an alarm has occured, and the offending device is no longer in violation of the behavior for 1 consecutive datapoints, the alarm is cleared. You need to keep the mesage size metrics of each message for investigation. Under Addionional Metrics to retain , click on Select on the right corner to see drop down list of metrics that we can retain. Select Message size . You also need to keep track of how many messages are sent and received between AWS IoT and each device in a given period. To keep this metric, select Message received . Then click Next Select a SNS topic for alerts when a device violates a behavior in this profile. An SNS topic was created for you in advance. This step is similar to Module 2, session 1.1, Option 1, step 9 and 10 . Select SNS topic BadIoTDevices-[CloudFormation stackname] . For IAM Role, select IAM role with this naming convention [CloudFormation-stack-name]-SNSTopicRole-[random-value] . If you worked on Module 2 of this workshop, you should already subcribed your email to this topic BadIoTDevices-[CloudFormation stackname] . If you haven't subscribed your email, don't forget to do so. You need to attach this security profile to a target. A target can be a thing, or a thing group, or every devices. For simplicity, we will attach this security profile with All things for now. Click Next to view summary of this Security Profile. When you confirm everything is correct, then click Save 2. Respond to a violation After you figure out how to detect unusual device's behaviors, next step is to respond to this violation. This session walk you through how to create a simple automation that will move violated device to an IoT Thing Group specifically for investigation. You attach an IAM policy to this Thing Group so that the devices in this Thing Group do not have any permision to perform any IoT actions. 2.1 Create IoT Thing Group that denies all IoT actions Sign in to your AWS account, click on IoT Device Defender. From IoT management console, click Manage , Thing groups , Create , Create Thing Group . Name your thing group as IsolatedDevices and click Create thing group Next, create a policy that deny all IoT actions Go back to main AWS IoT console, click on Secure, Policies, Create . Name your new policy. Under Add statements* , type **iot: for Action , and '*' for Resource ARN . Check Deny box, and click Create . Note that this policy only denies all IoT actions. If your devices have additional permission to work with others AWS services (for example, permission to Put an item in DynamoDB table), this policy won't deny those permission. Associate this policy with Thing Group that we create earlier. Go to Manage, Thing groups . Click on the Thing Group IsolatedDevices, Security, Edit . Select the policy that you create earlier, and click Save Any device in Thing Group IsolatedDevices will not have permission to send data to AWS IoT. Next, you use a Lambda function to move offending devices to this Thing Group 2.2 Use Lambda function to move device into Thing Group In this step, you use a Lambda function to move offending device to IsolatedDevices thing group for forensics. When Device Defender finds a violation and sends alerts to SNS topic that you created earlier, SNS will trigger this Lambda function. Note: in this Lab, we expect to have 1-2 violations, which means the Lambda function will be triggered no more than 2 times. A Lambda function IsolateDevice was already created in advance for you. To understand what this Lambda function does, go to Lambda console, click Function . Click IsolateDevice Under Function Code , you will see Python code below. When alert from Device Defender Detect is sent to SNS topic BadIoTDevices-[CloudFormation stackname] , SNS will trigger this Lambda function. This function will parse the SNS message to retrieve offending device's name, and add this device to Thing Group IsolatedDevices Note: you need to provide Thing Group name to this function, and subscribe Lambda function to SNS topic by following steps below. import boto3 import json iot = boto3 . client ( 'iot' ) def lambda_handler ( event , context ): message = event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ] d = json . loads ( message ) thing = d [ 'thingName' ] addThing = iot . add_thing_to_thing_group ( thingGroupName = os . environ [ 'ThingGroupName' ], thingName = thing ) You need to provide Thing Group name for this Lambda function. To do so, you create an Environment Variables. Scroll down to Environment Variables , click Manage environment variables Click Add environment variable . Type ThingGroupName as Key (need to be exactly as ThingGroupName), and IsolatedDevices as Value. Click Save. Now this function is ready to be invoked. The next thing to do is to configure SNS topic to trigger this function. On the function console, expand Designer Click Add trigger . Select SNS . Select topic BadIoTDevices-[CloudFormation stackname] . Check Enable trigger . And click Add to make this SNS topic as a trigger of your function. IsolateDevice is now receiving events from trigger SNS topic BadIoTDevices-[CloudFormation stackname] . That means, it will move offending device to Thing Group IsolatedDevice when Device Defender alerts a violation. Next step, you are going to test if this automation works as expected. 3. Simulate a compromised device In this step, you update SensorDevice02's code to similate a situation that its message is very large compared with regular message size. Because this behavior can indate that the device is compromised, you want to stop this device from taking any IoT actions, and move it to quarantive Thing Group to investigate further. 3.1 Update message size To update the message size SensorDevice02 is sending to AWS IoT, go to Lambda management console, click on function SensorDevice02 . Scroll down and comment out the code that generate random temperature telemetry data so line 57 looks like the following: #telemetrydata = round(random.uniform(15.1,29.9),2) Instead, create a large random string has 3000 characters. To do so, uncomment the line of code below (line 60) telemetrydata = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 3000)) Click Save on the topc right corner. After saving this code change, your new code should look like this: After this change, each message from SensorDevice02 device will have 3000 characters - which is very abnormal compared to regular message size (only have a 3-4 characters) Now we wait for a few minutes until you receive email from SNS. After that you can go to Manage, Thing Groups, IsolatedDevices, Things to see that Thing02 should be added to this group. Now let's check if this device has stopped sending telemetry data by going to Test, Subscribe to a topic , enter the topic temperature-device-02 . If your automation in step 2 works. You shouldn't see any message there because we have associated DenyAll policy to Thing Group IsolatedDevices Congratulations! By completing this module, you have learned how to detect unusual behaviors of IoT devices, and stop offending devices to take any IoT actions. Next, move to Module 4: Detect a compromised device using device-side metrics to use device-side metrics to detect compromised devices.","title":"Module 3: Detect a compromised device using cloud-side metrics"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#module-3-detect-a-compromised-device-using-cloud-side-metrics","text":"In Module 2, you learned how to set up automation to audit devices configuration and implement mitigation actions. With additional security requirements from your IT organization, you need to have a solution in place to detect unusual behaviors of IoT devices, which can indicate that devices are compromised and participate in bad activities (for example, participate in a DDoS attack). You also need to find a solution to quickly response to this changes in device's behaviors. Becuase these IoT devices are used to send temperature telemetry, you identify one behavior indicates that a device is compromised: sending very large message compared to the regular message, which only has temperature telemetry. This module will walk you through neccessary steps to use metrics collected by AWS IoT (cloud-side metrics) to detect a compromised devices. Define unusual behaviors of your devices Respond to a violation Simulate a compromised device","title":"Module 3: Detect a compromised device using cloud-side metrics"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#1-define-unusual-behaviors-of-your-devices","text":"Your task is to implement a solution to detect unusual behaviors of IoT devices. How do you know if a device acts differently than its regular behavior? You need to have metrics related to the device's activities, and you need to define when the value of each metric is considered outside of regularity. AWS IoT Device Defender Detect monitor cloud-side metrics to detect abnormal behaviors (such as the number of authorization failures, or the number or size of messages a device sends or receives through AWS IoT). However, you need to tell Device Defender when these metrics aren't normal. To do that, you need to create a Security Profile . A security profile defines abnomal behaviors for a group of devices (a thing group) or for all devices in your account, and specifies what actions to take when an anomaly is detected. In this case, you will create a Security Profile to allow Device Defender to monitor the message size of all three devices. The Software Development Team didn't share with you average message size of each message. But Device Defender can use statisticalThreshold to detect if incoming messages are larger then the average message size. Sign in to your AWS account. From AWS console home, go to IoT console On the left side of IoT Console, Click Defend, Detect, Security Profiles, Create your first security profile . Name this security profile as DetectLargeMessageSize . Under Behaviors , create a behavior named LargeMessageSize . We ask Device Defender to observe message size and alert us it transmits messages whose cumulative size is more than 1000bytes in a minute. Click on drop down list under Metric , and choose metric Message Size . Choose Check Type as Statistical Threshold . For Operator , choose Greater than . Specify p50 for Statistical Threshold . That means, the criteria to trigger alert is when the incoming message size is larger than the 50% of all measurements. Choose 5 minutes for Duration . For a Statistical Threshold check type, this is the time window during which metrics are collected from all devices to determine the statistical ranking of the data from an individual device. For Datapoints to Alarm , specify 1 . If a device is in violation of this behavior for 1 datapoints, an alarm occurs. For Datapoints to Clear , specify 1 . If an alarm has occured, and the offending device is no longer in violation of the behavior for 1 consecutive datapoints, the alarm is cleared. You need to keep the mesage size metrics of each message for investigation. Under Addionional Metrics to retain , click on Select on the right corner to see drop down list of metrics that we can retain. Select Message size . You also need to keep track of how many messages are sent and received between AWS IoT and each device in a given period. To keep this metric, select Message received . Then click Next Select a SNS topic for alerts when a device violates a behavior in this profile. An SNS topic was created for you in advance. This step is similar to Module 2, session 1.1, Option 1, step 9 and 10 . Select SNS topic BadIoTDevices-[CloudFormation stackname] . For IAM Role, select IAM role with this naming convention [CloudFormation-stack-name]-SNSTopicRole-[random-value] . If you worked on Module 2 of this workshop, you should already subcribed your email to this topic BadIoTDevices-[CloudFormation stackname] . If you haven't subscribed your email, don't forget to do so. You need to attach this security profile to a target. A target can be a thing, or a thing group, or every devices. For simplicity, we will attach this security profile with All things for now. Click Next to view summary of this Security Profile. When you confirm everything is correct, then click Save","title":"1. Define unusual behaviors of your devices"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#2-respond-to-a-violation","text":"After you figure out how to detect unusual device's behaviors, next step is to respond to this violation. This session walk you through how to create a simple automation that will move violated device to an IoT Thing Group specifically for investigation. You attach an IAM policy to this Thing Group so that the devices in this Thing Group do not have any permision to perform any IoT actions.","title":"2. Respond to a violation"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#21-create-iot-thing-group-that-denies-all-iot-actions","text":"Sign in to your AWS account, click on IoT Device Defender. From IoT management console, click Manage , Thing groups , Create , Create Thing Group . Name your thing group as IsolatedDevices and click Create thing group Next, create a policy that deny all IoT actions Go back to main AWS IoT console, click on Secure, Policies, Create . Name your new policy. Under Add statements* , type **iot: for Action , and '*' for Resource ARN . Check Deny box, and click Create . Note that this policy only denies all IoT actions. If your devices have additional permission to work with others AWS services (for example, permission to Put an item in DynamoDB table), this policy won't deny those permission. Associate this policy with Thing Group that we create earlier. Go to Manage, Thing groups . Click on the Thing Group IsolatedDevices, Security, Edit . Select the policy that you create earlier, and click Save Any device in Thing Group IsolatedDevices will not have permission to send data to AWS IoT. Next, you use a Lambda function to move offending devices to this Thing Group","title":"2.1 Create IoT Thing Group that denies all IoT actions"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#22-use-lambda-function-to-move-device-into-thing-group","text":"In this step, you use a Lambda function to move offending device to IsolatedDevices thing group for forensics. When Device Defender finds a violation and sends alerts to SNS topic that you created earlier, SNS will trigger this Lambda function. Note: in this Lab, we expect to have 1-2 violations, which means the Lambda function will be triggered no more than 2 times. A Lambda function IsolateDevice was already created in advance for you. To understand what this Lambda function does, go to Lambda console, click Function . Click IsolateDevice Under Function Code , you will see Python code below. When alert from Device Defender Detect is sent to SNS topic BadIoTDevices-[CloudFormation stackname] , SNS will trigger this Lambda function. This function will parse the SNS message to retrieve offending device's name, and add this device to Thing Group IsolatedDevices Note: you need to provide Thing Group name to this function, and subscribe Lambda function to SNS topic by following steps below. import boto3 import json iot = boto3 . client ( 'iot' ) def lambda_handler ( event , context ): message = event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ] d = json . loads ( message ) thing = d [ 'thingName' ] addThing = iot . add_thing_to_thing_group ( thingGroupName = os . environ [ 'ThingGroupName' ], thingName = thing ) You need to provide Thing Group name for this Lambda function. To do so, you create an Environment Variables. Scroll down to Environment Variables , click Manage environment variables Click Add environment variable . Type ThingGroupName as Key (need to be exactly as ThingGroupName), and IsolatedDevices as Value. Click Save. Now this function is ready to be invoked. The next thing to do is to configure SNS topic to trigger this function. On the function console, expand Designer Click Add trigger . Select SNS . Select topic BadIoTDevices-[CloudFormation stackname] . Check Enable trigger . And click Add to make this SNS topic as a trigger of your function. IsolateDevice is now receiving events from trigger SNS topic BadIoTDevices-[CloudFormation stackname] . That means, it will move offending device to Thing Group IsolatedDevice when Device Defender alerts a violation. Next step, you are going to test if this automation works as expected.","title":"2.2 Use Lambda function to move device into Thing Group"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#3-simulate-a-compromised-device","text":"In this step, you update SensorDevice02's code to similate a situation that its message is very large compared with regular message size. Because this behavior can indate that the device is compromised, you want to stop this device from taking any IoT actions, and move it to quarantive Thing Group to investigate further.","title":"3. Simulate a compromised device"},{"location":"Module%203%3A%20Detect%20a%20compromised%20device%20using%20cloud-side%20metrics/#31-update-message-size","text":"To update the message size SensorDevice02 is sending to AWS IoT, go to Lambda management console, click on function SensorDevice02 . Scroll down and comment out the code that generate random temperature telemetry data so line 57 looks like the following: #telemetrydata = round(random.uniform(15.1,29.9),2) Instead, create a large random string has 3000 characters. To do so, uncomment the line of code below (line 60) telemetrydata = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 3000)) Click Save on the topc right corner. After saving this code change, your new code should look like this: After this change, each message from SensorDevice02 device will have 3000 characters - which is very abnormal compared to regular message size (only have a 3-4 characters) Now we wait for a few minutes until you receive email from SNS. After that you can go to Manage, Thing Groups, IsolatedDevices, Things to see that Thing02 should be added to this group. Now let's check if this device has stopped sending telemetry data by going to Test, Subscribe to a topic , enter the topic temperature-device-02 . If your automation in step 2 works. You shouldn't see any message there because we have associated DenyAll policy to Thing Group IsolatedDevices Congratulations! By completing this module, you have learned how to detect unusual behaviors of IoT devices, and stop offending devices to take any IoT actions. Next, move to Module 4: Detect a compromised device using device-side metrics to use device-side metrics to detect compromised devices.","title":"3.1 Update message size"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/","text":"Module 4: Detect a compromised device using device-side metrics In previous module, you used cloud-side metrics capture by AWS IoT to monitor and detect if a device has an abnormal behavior. You also built a solution to automatically isolate the device for quarantine. In this module you will learn how to monitor and stop suspicious device from any actions, by using metrics capture from the device itself. 1. Configure SensorDevice03 to send telemetry data to AWS IoT Device SensorDevice03 hasn't sent any temperature data to AWS IoT. In this step, you will need to start a bootstrap script on the device. This script will generate random temperature data and send it to AWS IoT endpoint. Open your Cloud9 environment. From Cloud9 environment terminal, go to directory below to run bootstrap script: cd /home/ec2-user/environment git clone https://github.com/hongpham/Workshop-Protect-your-IoT-fleet.git cd Workshop-Protect-your-IoT-fleet/ cd 'Module 4: Detect a compromised device using device-side metrics' Run script bootstrap.sh to install dependencies and make this device to send data to AWS IoT (make sure you are at directory 'Module 4: Detect a compromised device using device-side metrics'). In this workshop, the default topic name is temperature-device-03 , default device name is SensorDevice03 . See screenshot in step 4 for an example. . / bootstrap . sh - t [ topic name ] - n [ device name ] The script will write AWS IoT Endpoint to a temporary file under /tmp/endpoint. You will need this endpoint later. This bootstrap script will start a python program in the background to send data to AWS IoT topic temperature-device-03 . To validate if this device is sendind telemetry data, you can check if the script is running by the command below. ps aux |grep python #this command search for the current running processes that has 'python' in it's name If you see a process like 'python startdevice.py -t [topic name] -d [device name] , this device is sending telemetry data to AWS IoT. 2. Install AWS Device Defender Agent to collect metrics on the device In this step, you will install AWS Device Defender Agent (Python version) on this device SensorDevice03 Run these commands to install Agent cd /home/ec2-user/environment/workshop sudo pip install -r requirements.txt sudo pip install AWSIoTDeviceDefenderAgentSDK Open a text editor, retrieve neccesary parameters below and save it in your text editor. You will need these parameters to start Device Defender Agent a. AWS IoT Endpoint: when you run bootstrap.sh script to bootstrap the device, the script retrieve AWS IoT endpoint and save it under /tmp/endpoint. In the terminal, you can run the command below to retrieve the endpoint: cat /tmp/endpoint Click here if you can't find AWS IoT endpoint in /tmp/endpoint 1. If you don ' t have AWS IoT Endpoint in file / tmp / endpoint , you can retrieve it manually from AWS IoT Console . 2. Go to ** AWS IoT Core console ** . Make sure that you are in the correct region . Click ** Manage ** to view list of IoT things . Click on any thing , for example ** Thing01 ** . Click ** Interact ** . Copy the Rest API endpoint under ** HTTPS ** < img src = \"../images/endpoint.png\" /> b . Device name : in this workshop , default device name is ** SensorDevice03 ** c . Thing name : in this workshop , default thing name is ** Thing03 ** Extend Agent Connection timeout: the minimum interval to send device metrics to Device Defender is 5 minutes (300 s). In this workshop, to make sure the established connection between device and AWS IoT will not be closed when the Agent is collecting data, you will need to increase ConnectionTimeout a. Make sure you are in directory AWSIoTDeviceDefenderAgentSDK. Change timeout configuration by editing agent.py cd /home/ec2-user/environment/workshop/AWSIoTDeviceDefenderAgentSDK vi agent.py b. Change the values of configureConnectDisconnectTimeout and configureMQTTOperationTimeout to 1800 seconds (30 minutes) c. Save and close agent.py by pressing Esc on the keyboard, then type :wq Start Device Defender Agent by running this command python agent . py -- endpoint [ your AWS IoT endpoint retrieved from step 2. a above ] \\ -- rootCA / tmp / rootca . pem -- cert / tmp / cert . pem -- key / tmp / private . key \\ -- client_id [ Device name ] -- thing_name [ Thing name ] -- format json - i 300 > agent . out 2 >& 1 If you notice, you will see that X.509 certificate and it's private key is requried to start Device Defender Agent. These are credentials the Agent will use to send to AWS IoT. These credentials are already download for you under /tmp directory. The Agent will collect metrics and sends to AWS IoT as json format every 300 seconds (or 5 minutes - which is minimum reporting interval) After a few minutes, you should see a message confirm that Agent is sending metrics data to AWS IoT Let the Agent run for a 10-15 minutes. Move to next step to configure device behaviors on Device Defender. 3. Define unusual behaviors Your task is to implement a solution to detect unusual behaviors on the IoT device itself. Like in Module 3, you need to define when the value of each metric is considered outside of regularity. You need to create a new Security Profile . In this case, you will create a Security Profile to allow Device Defender to monitor the bytes sent from the device. Device Defender can use statisticalThreshold to detect if outgoing messages from your device are larger then the average number of bytes sent. Go to the IoT console. On the left side of IoT Console, Click Defend, Detect, Security Profiles . Click the Create button on the upper right hand corner. Name this security profile as DetectSendingMoreThanAverageBytes . Under Behaviors , create a behavior named MoreBytesSent . We ask Device Defender to observe the number of bytes and alert us it transmits sends a message that's more than 200 bytes. Click on drop down list under Metric , and choose metric Bytes out . Choose Check Type as Absolute value to check the exact number of bytes sent. For Operator , choose Greater than . Specify 200 for Vale . That means if the number of bytes in a message sent from the device is more than 200 bytes, it will trigger an alert. Choose 5 minutes for Duration and leave the default 1 for both Datapoints to alarm and Datapoints to clear . Expand the Additional Metrics to retain and check the box next to Bytes out . Click Next . On the next page, send messages to the same SNS topic from Module 3 - BadIoTDevices- and select the role that starts with -SNSTopicRole- to grant permission for Device Defender to publish on the SNS topic. Click Next . Check the box next to All things too attach the security profile to all IoT things. Click Next . Review that the configuration is as detailed above and click Save , then Continue . 4. Respond to violations Once your message violates the security profile, it will trigger a message to be sent to the SNS topic. The SNS topic will trigger the same lambda function as Module 3. As before, when this lambda function is triggered, it will move the IoT Thing that represents your Cloud9 instance, to the isolated thing group. 5. Simulate a compromised device In this section, we will be simulating a device that has been compromised and sending more data than it is supposed to send. 5.1 Update message size To update the number of bytes the Cloud9 instance will send to AWS IoT, go to the Cloud9 service page, under Your environments , click Open IDE in the environment named SensorDevice03 . From Cloud9 environment terminal, go to directory below to run bootstrap script: cd /home/ec2-user/environment git clone https://github.com/hongpham/Workshop-Protect-your-IoT-fleet.git cd Workshop-Protect-your-IoT-fleet/ cd 'Module 4: Detect a compromised device using device-side metrics' After repo is published, use CFN to download repo to Cloud9 during provisioning. Need to update git repo name after it's published. Also need to put a screen shot of these command. Open the startdevice.py file: vim startdevice.py Go to line 86 and comment out the current telementrydata that generate random temperature telemetry data so line 86 looks like the following: #telemetrydata = round(random.uniform(15.1,29.9),2) Instead, create a large random string has 3000 characters. To do so, uncomment the line of code below (line 89) telemetrydata = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 3000)) Save this code change and re-run the bootstrap script: . / bootstrap . sh - t [ topic name ] - n [ device name ] The device is now sending more bytes out than it should be. After 5 minutes, the device should show up in the IsolatedDevices . Congrationlations! You have successfully used Device Defender Agent to monitor device behaviors from the device itself. If you have time to work on extra-credit challenges, move on to Module 5: Send security alerts to your favourite messaging platform","title":"Module 4: Detect a compromised device using device-side metrics"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#module-4-detect-a-compromised-device-using-device-side-metrics","text":"In previous module, you used cloud-side metrics capture by AWS IoT to monitor and detect if a device has an abnormal behavior. You also built a solution to automatically isolate the device for quarantine. In this module you will learn how to monitor and stop suspicious device from any actions, by using metrics capture from the device itself.","title":"Module 4: Detect a compromised device using device-side metrics"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#1-configure-sensordevice03-to-send-telemetry-data-to-aws-iot","text":"Device SensorDevice03 hasn't sent any temperature data to AWS IoT. In this step, you will need to start a bootstrap script on the device. This script will generate random temperature data and send it to AWS IoT endpoint. Open your Cloud9 environment. From Cloud9 environment terminal, go to directory below to run bootstrap script: cd /home/ec2-user/environment git clone https://github.com/hongpham/Workshop-Protect-your-IoT-fleet.git cd Workshop-Protect-your-IoT-fleet/ cd 'Module 4: Detect a compromised device using device-side metrics' Run script bootstrap.sh to install dependencies and make this device to send data to AWS IoT (make sure you are at directory 'Module 4: Detect a compromised device using device-side metrics'). In this workshop, the default topic name is temperature-device-03 , default device name is SensorDevice03 . See screenshot in step 4 for an example. . / bootstrap . sh - t [ topic name ] - n [ device name ] The script will write AWS IoT Endpoint to a temporary file under /tmp/endpoint. You will need this endpoint later. This bootstrap script will start a python program in the background to send data to AWS IoT topic temperature-device-03 . To validate if this device is sendind telemetry data, you can check if the script is running by the command below. ps aux |grep python #this command search for the current running processes that has 'python' in it's name If you see a process like 'python startdevice.py -t [topic name] -d [device name] , this device is sending telemetry data to AWS IoT.","title":"1. Configure SensorDevice03 to send telemetry data to AWS IoT"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#2-install-aws-device-defender-agent-to-collect-metrics-on-the-device","text":"In this step, you will install AWS Device Defender Agent (Python version) on this device SensorDevice03 Run these commands to install Agent cd /home/ec2-user/environment/workshop sudo pip install -r requirements.txt sudo pip install AWSIoTDeviceDefenderAgentSDK Open a text editor, retrieve neccesary parameters below and save it in your text editor. You will need these parameters to start Device Defender Agent a. AWS IoT Endpoint: when you run bootstrap.sh script to bootstrap the device, the script retrieve AWS IoT endpoint and save it under /tmp/endpoint. In the terminal, you can run the command below to retrieve the endpoint: cat /tmp/endpoint Click here if you can't find AWS IoT endpoint in /tmp/endpoint 1. If you don ' t have AWS IoT Endpoint in file / tmp / endpoint , you can retrieve it manually from AWS IoT Console . 2. Go to ** AWS IoT Core console ** . Make sure that you are in the correct region . Click ** Manage ** to view list of IoT things . Click on any thing , for example ** Thing01 ** . Click ** Interact ** . Copy the Rest API endpoint under ** HTTPS ** < img src = \"../images/endpoint.png\" /> b . Device name : in this workshop , default device name is ** SensorDevice03 ** c . Thing name : in this workshop , default thing name is ** Thing03 ** Extend Agent Connection timeout: the minimum interval to send device metrics to Device Defender is 5 minutes (300 s). In this workshop, to make sure the established connection between device and AWS IoT will not be closed when the Agent is collecting data, you will need to increase ConnectionTimeout a. Make sure you are in directory AWSIoTDeviceDefenderAgentSDK. Change timeout configuration by editing agent.py cd /home/ec2-user/environment/workshop/AWSIoTDeviceDefenderAgentSDK vi agent.py b. Change the values of configureConnectDisconnectTimeout and configureMQTTOperationTimeout to 1800 seconds (30 minutes) c. Save and close agent.py by pressing Esc on the keyboard, then type :wq Start Device Defender Agent by running this command python agent . py -- endpoint [ your AWS IoT endpoint retrieved from step 2. a above ] \\ -- rootCA / tmp / rootca . pem -- cert / tmp / cert . pem -- key / tmp / private . key \\ -- client_id [ Device name ] -- thing_name [ Thing name ] -- format json - i 300 > agent . out 2 >& 1 If you notice, you will see that X.509 certificate and it's private key is requried to start Device Defender Agent. These are credentials the Agent will use to send to AWS IoT. These credentials are already download for you under /tmp directory. The Agent will collect metrics and sends to AWS IoT as json format every 300 seconds (or 5 minutes - which is minimum reporting interval) After a few minutes, you should see a message confirm that Agent is sending metrics data to AWS IoT Let the Agent run for a 10-15 minutes. Move to next step to configure device behaviors on Device Defender.","title":"2. Install AWS Device Defender Agent to collect metrics on the device"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#3-define-unusual-behaviors","text":"Your task is to implement a solution to detect unusual behaviors on the IoT device itself. Like in Module 3, you need to define when the value of each metric is considered outside of regularity. You need to create a new Security Profile . In this case, you will create a Security Profile to allow Device Defender to monitor the bytes sent from the device. Device Defender can use statisticalThreshold to detect if outgoing messages from your device are larger then the average number of bytes sent. Go to the IoT console. On the left side of IoT Console, Click Defend, Detect, Security Profiles . Click the Create button on the upper right hand corner. Name this security profile as DetectSendingMoreThanAverageBytes . Under Behaviors , create a behavior named MoreBytesSent . We ask Device Defender to observe the number of bytes and alert us it transmits sends a message that's more than 200 bytes. Click on drop down list under Metric , and choose metric Bytes out . Choose Check Type as Absolute value to check the exact number of bytes sent. For Operator , choose Greater than . Specify 200 for Vale . That means if the number of bytes in a message sent from the device is more than 200 bytes, it will trigger an alert. Choose 5 minutes for Duration and leave the default 1 for both Datapoints to alarm and Datapoints to clear . Expand the Additional Metrics to retain and check the box next to Bytes out . Click Next . On the next page, send messages to the same SNS topic from Module 3 - BadIoTDevices- and select the role that starts with -SNSTopicRole- to grant permission for Device Defender to publish on the SNS topic. Click Next . Check the box next to All things too attach the security profile to all IoT things. Click Next . Review that the configuration is as detailed above and click Save , then Continue .","title":"3. Define unusual behaviors"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#4-respond-to-violations","text":"Once your message violates the security profile, it will trigger a message to be sent to the SNS topic. The SNS topic will trigger the same lambda function as Module 3. As before, when this lambda function is triggered, it will move the IoT Thing that represents your Cloud9 instance, to the isolated thing group.","title":"4. Respond to violations"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#5-simulate-a-compromised-device","text":"In this section, we will be simulating a device that has been compromised and sending more data than it is supposed to send.","title":"5. Simulate a compromised device"},{"location":"Module%204%3A%20Detect%20a%20compromised%20device%20using%20device-side%20metrics/#51-update-message-size","text":"To update the number of bytes the Cloud9 instance will send to AWS IoT, go to the Cloud9 service page, under Your environments , click Open IDE in the environment named SensorDevice03 . From Cloud9 environment terminal, go to directory below to run bootstrap script: cd /home/ec2-user/environment git clone https://github.com/hongpham/Workshop-Protect-your-IoT-fleet.git cd Workshop-Protect-your-IoT-fleet/ cd 'Module 4: Detect a compromised device using device-side metrics' After repo is published, use CFN to download repo to Cloud9 during provisioning. Need to update git repo name after it's published. Also need to put a screen shot of these command. Open the startdevice.py file: vim startdevice.py Go to line 86 and comment out the current telementrydata that generate random temperature telemetry data so line 86 looks like the following: #telemetrydata = round(random.uniform(15.1,29.9),2) Instead, create a large random string has 3000 characters. To do so, uncomment the line of code below (line 89) telemetrydata = ''.join(random.choices(string.ascii_uppercase + string.digits, k = 3000)) Save this code change and re-run the bootstrap script: . / bootstrap . sh - t [ topic name ] - n [ device name ] The device is now sending more bytes out than it should be. After 5 minutes, the device should show up in the IsolatedDevices . Congrationlations! You have successfully used Device Defender Agent to monitor device behaviors from the device itself. If you have time to work on extra-credit challenges, move on to Module 5: Send security alerts to your favourite messaging platform","title":"5.1 Update message size"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/","text":"Module 5: Send security alerts to your favourite messaging platform For many Security Engineers, receiving alerts in real time is critical. They need to act quickly to reduce impact of security issues. SMS message, or messaging platform such as Slack or Chime, are common tools to notify engineers when thing goes wrong. In this extra-credit module, you configure SNS to send Device Defender alerts to your phone, Amazon Chime chatroom, or Slack channel. Note: you need to have a SNS topic receives alerts from Device Defender to work on this module Send SMS message to your phone Receive alerts on Chime chatroom Receive alerts on Slack channel Test Alerts 1. Send SMS message to your phone (only available in region that supports SMS messaging ): You can subcribe your phone number to SNS topic receive alerts from IoT Device Defender. When a new alert occurs, SNS will send you a SMS message (SMS cost will be charged) Sign in to your AWS account. From AWS console home, click SNS On the left hand side, click on menu bar to show the list of SNS features. Click Subscriptions Choose SNS topic that you use to receive alerts from IoT Device Defender. Choose SMS as protocal. Type in your phone number in EndPoint . Click Create subscription You will need to confirm your subscription in order to start receiving SMS message. Now you can move to Test Alerts to test out this new intergration 2. Receive alerts on Chime chatroom Amazon Chime is a communication tool that lets you chat and place calls. Chime provide a feature call Incoming Webhook to allow applications post message to Chime chatroom. You can configure SNS to send a message to your Chime chatroom when Device Defender generates an alert. 2.1 Configure Chime Webhook If you don't have a chat room, you can create a new one. From Chime App, click Rooms, Create a chat room, Done Click on the gear icon top right of the chat room. Then click Manage webhooks and bots . Click Add webhook and give it a name. Your webhook will have a unique URL e.g. https://hooks.chime.aws/incomingwebhooks/ ?token=xxxxxxxxxxxxxxxxxxxx). You need to protect this URL just as you protect any secret materials (API keys, username-password,..) because anyone has this URL can post a message to your chat room. Copy this URL and save it in a touchpad. You will need this URL to config Lamdbda function in step 2.2 2.2 Create deployment package for Lambda function Since SNS doesn't intergrate with Chime directly, we will use a Lambda function to post the SNS message to the Chime chatroom. You will need to create a deployment package for this Lambda function by following these steps: a. Clone this workshop github repo, change directory to 'Module 5: Send security alerts to your favourite messaging platform', navigate to folder 'LambdaWebhookChime'. This folder should only have a python script index.py at the moment. b. We will install neccessary dependecies for this python script. Under device folder, create a subfolder called Package. mkdir Package cd Package c. Install these dependencies, choose Package as target folder. pip install --target . requests d. Create a zip archive of the dependencies named webhookchime.zip in Package and store it in LambdaWebhookChime folder. Run this command when you currently in Package folder zip -r9 ../webhookchime.zip . e. Add python script device.py to the archive cd .. zip -g webhookchime.zip index.py f. You will upload this zip file when you create lambda function next step 2.3 Configure Lambda function From Lambda management console, create a new Lambda function. Give this new function a name and choose Python3.* as runtime with default permissions. Now we already write the code for this lambda function and install all dependencies in previous step. Upload this deploymet packages webhookchime.zip to the Lambda function. Under Function code , click the drop down Code entry type , and choose Upload a .zip file . Make sure the function hander is 'index.handler'. Here is the code snippet of this Lambda function import json import os import boto3 import requests from base64 import b64decode def get_message ( event ): try : message = json . loads ( event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ]) thing = 'Thing name: ' + message [ 'thingName' ] securityprofile = 'Security profile: ' + message [ 'securityProfileName' ] behaviorname = 'Behavior name: ' + message [ 'behavior' ][ 'name' ] return \" | \" . join ([ thing , securityprofile , behaviorname ]) except KeyError : return 'test message' def handler ( event , context ): print ( 'Getting ready to send message to Amazon Chime room' ) content = 'IoT Device Defender alert! {0} ' . format ( get_message ( event )) webhook_uri = os . environ [ 'CHIME_WEBHOOK' ] requests . post ( url = webhook_uri , json = { 'Content' : content }) print ( 'Finished sending notification to Amazon Chime room' ) Next create an environment variables to provide Chime Webhook URL to Lamdba function. Scroll to Environment Variables . From the right side, click Edit --> Add environment variables . Add CHIME_WEBHOOK as the Key and provide webhook URL as the Value. Click Save This function parse the SNS message to retrieve Thing name, Security Profile, and Behavior name, then it use requests method to post these information to the webhook URL. In this lab, we have stored the webhook URL as an environment variable CHIME_WEBHOOK . In production use cases, we would recommend to store it securely using AWS Secrets Manager or any existing tools/vault that your team is using. When you have succcesfully created this Lambda function, let's add SNS as a trigger. Under Designer , click Add trigger and select SNS . Choose the SNS topic that you configured to receive IoT Device Defender alerts in. Remember to check box Enable trigger . Then click Add Now you can move to Test Alerts to test out this new intergration 3. Receive alerts on Slack channel You need to have a Slack channel in this session. To configure Device Defender send alerts to Slack channel, follow steps below 3.1 Create a Slack Incoming WebHook Start by setting up an incoming webhook integration . Choose the channel that Webhook will post messages to and click Add Incoming Webhooks integration Note down the Webhook URL and save it in your favourite text editor. 3.2 Create Lambda function to post messages to Slack Sign in to your AWS account. Go to Lambda console and create a Lambda function to post the message to the channel. Click Create function . Select Author from Scratch . Name this lambda function. Chose Python 3.8 for Runtime, and choose Create a new role with basic Lambda permissions for Execution Role. Click Create function Replace the code in Lambda function with Python code below. You can also download it from LambdaWebhookSlack.py . Remember to click Save import boto3 import json import logging import os from base64 import b64decode from urllib.request import Request , urlopen from urllib.error import URLError , HTTPError #The hook URL of Slcak channel HOOK_URL = os . environ [ 'slackHookURL' ] # The Slack channel to send a message to stored in the slackChannel environment variable SLACK_CHANNEL = os . environ [ 'slackChannel' ] logger = logging . getLogger () logger . setLevel ( logging . INFO ) def lambda_handler ( event , context ): logger . info ( \"Event: \" + str ( event )) message = json . loads ( event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ]) logger . info ( \"Message: \" + str ( message )) thing = 'Thing name: ' + message [ 'thingName' ] securityprofile = 'Security profile: ' + message [ 'securityProfileName' ] behaviorname = 'Behavior name: ' + message [ 'behavior' ][ 'name' ] slack_message = { 'channel' : SLACK_CHANNEL , 'text' : \" You have a new Device Defender alert: %s , %s , %s \" % ( thing , securityprofile , behaviorname ) } req = Request ( HOOK_URL , json . dumps ( slack_message ) . encode ( 'utf-8' )) try : response = urlopen ( req ) response . read () logger . info ( \"Message posted to %s \" , slack_message [ 'channel' ]) except HTTPError as e : logger . error ( \"Request failed: %d %s \" , e . code , e . reason ) except URLError as e : logger . error ( \"Server connection failed: %s \" , e . reason ) Under Environment variables , click Edit and Add environment variable . You need to add two environmen variables slackHookURL and slackChannel . Provide values for these variables. Then click Save Now add SNS as a trigger for this function. Under SNS trigger , choose the SNS topic that Device Defender sends alerts to. From previous modules, a SNS topic BadIoTDevices-[CloudFormation stackname] was created. You can use this SNS topic or create a new one. Remember to check box Enable trigger . Then click Add Note: we recommend to protect your WebHookURL just like you pretect a password. You can use KMS to encrypt the URL of the webhook, and base-64 encode it before pasting it in to the code. An example can be found in Slack Integration Blueprint for Lambda Now you can move to Test Alerts to test out this new intergration 4. Test alerts To test if notification works, you can publish this test SNS message below using SNS console. This is an example alerts generated by Device Defender. Sign in to your AWS account, click SNS to go to SNS console On the left side, click on menu bar, and click Topics to see the list of SNS topics. In this module, select BadIoTDevices-[CloudFormation stackname] topic. Click Publish message on the top right corner. Copy the json blob below to Message body to send to the endpoint . Then click Publish message { \"violationEventTime\" : 1582745400000 , \"thingName\" : \"myIoTDevice\" , \"behavior\" : { \"criteria\" : { \"consecutiveDatapointsToClear\" : 1 , \"value\" : { \"count\" : 5000 }, \"consecutiveDatapointsToAlarm\" : 1 , \"comparisonOperator\" : \"greater-than\" }, \"name\" : \"messageSize\" , \"metric\" : \"aws:message-byte-size\" }, \"violationEventType\" : \"in-alarm\" , \"metricValue\" : { \"count\" : 26 }, \"violationId\" : \"123456789\" , \"securityProfileName\" : \"LargeMessageSize\" } Congratulations! You have succesfully sent Device Defender alerts in real time to your favourite communication tools.","title":"Module 5: Send security alerts to your favourite messaging platform"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#module-5-send-security-alerts-to-your-favourite-messaging-platform","text":"For many Security Engineers, receiving alerts in real time is critical. They need to act quickly to reduce impact of security issues. SMS message, or messaging platform such as Slack or Chime, are common tools to notify engineers when thing goes wrong. In this extra-credit module, you configure SNS to send Device Defender alerts to your phone, Amazon Chime chatroom, or Slack channel. Note: you need to have a SNS topic receives alerts from Device Defender to work on this module Send SMS message to your phone Receive alerts on Chime chatroom Receive alerts on Slack channel Test Alerts","title":"Module 5: Send security alerts to your favourite messaging platform"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#1-send-sms-message-to-your-phone-only-available-in-region-that-supports-sms-messaging","text":"You can subcribe your phone number to SNS topic receive alerts from IoT Device Defender. When a new alert occurs, SNS will send you a SMS message (SMS cost will be charged) Sign in to your AWS account. From AWS console home, click SNS On the left hand side, click on menu bar to show the list of SNS features. Click Subscriptions Choose SNS topic that you use to receive alerts from IoT Device Defender. Choose SMS as protocal. Type in your phone number in EndPoint . Click Create subscription You will need to confirm your subscription in order to start receiving SMS message. Now you can move to Test Alerts to test out this new intergration","title":"1. Send SMS message to your phone (only available in region that supports SMS messaging):"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#2-receive-alerts-on-chime-chatroom","text":"Amazon Chime is a communication tool that lets you chat and place calls. Chime provide a feature call Incoming Webhook to allow applications post message to Chime chatroom. You can configure SNS to send a message to your Chime chatroom when Device Defender generates an alert.","title":"2. Receive alerts on Chime chatroom"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#21-configure-chime-webhook","text":"If you don't have a chat room, you can create a new one. From Chime App, click Rooms, Create a chat room, Done Click on the gear icon top right of the chat room. Then click Manage webhooks and bots . Click Add webhook and give it a name. Your webhook will have a unique URL e.g. https://hooks.chime.aws/incomingwebhooks/ ?token=xxxxxxxxxxxxxxxxxxxx). You need to protect this URL just as you protect any secret materials (API keys, username-password,..) because anyone has this URL can post a message to your chat room. Copy this URL and save it in a touchpad. You will need this URL to config Lamdbda function in step 2.2","title":"2.1 Configure Chime Webhook"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#22-create-deployment-package-for-lambda-function","text":"Since SNS doesn't intergrate with Chime directly, we will use a Lambda function to post the SNS message to the Chime chatroom. You will need to create a deployment package for this Lambda function by following these steps: a. Clone this workshop github repo, change directory to 'Module 5: Send security alerts to your favourite messaging platform', navigate to folder 'LambdaWebhookChime'. This folder should only have a python script index.py at the moment. b. We will install neccessary dependecies for this python script. Under device folder, create a subfolder called Package. mkdir Package cd Package c. Install these dependencies, choose Package as target folder. pip install --target . requests d. Create a zip archive of the dependencies named webhookchime.zip in Package and store it in LambdaWebhookChime folder. Run this command when you currently in Package folder zip -r9 ../webhookchime.zip . e. Add python script device.py to the archive cd .. zip -g webhookchime.zip index.py f. You will upload this zip file when you create lambda function next step","title":"2.2 Create deployment package for Lambda function"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#23-configure-lambda-function","text":"From Lambda management console, create a new Lambda function. Give this new function a name and choose Python3.* as runtime with default permissions. Now we already write the code for this lambda function and install all dependencies in previous step. Upload this deploymet packages webhookchime.zip to the Lambda function. Under Function code , click the drop down Code entry type , and choose Upload a .zip file . Make sure the function hander is 'index.handler'. Here is the code snippet of this Lambda function import json import os import boto3 import requests from base64 import b64decode def get_message ( event ): try : message = json . loads ( event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ]) thing = 'Thing name: ' + message [ 'thingName' ] securityprofile = 'Security profile: ' + message [ 'securityProfileName' ] behaviorname = 'Behavior name: ' + message [ 'behavior' ][ 'name' ] return \" | \" . join ([ thing , securityprofile , behaviorname ]) except KeyError : return 'test message' def handler ( event , context ): print ( 'Getting ready to send message to Amazon Chime room' ) content = 'IoT Device Defender alert! {0} ' . format ( get_message ( event )) webhook_uri = os . environ [ 'CHIME_WEBHOOK' ] requests . post ( url = webhook_uri , json = { 'Content' : content }) print ( 'Finished sending notification to Amazon Chime room' ) Next create an environment variables to provide Chime Webhook URL to Lamdba function. Scroll to Environment Variables . From the right side, click Edit --> Add environment variables . Add CHIME_WEBHOOK as the Key and provide webhook URL as the Value. Click Save This function parse the SNS message to retrieve Thing name, Security Profile, and Behavior name, then it use requests method to post these information to the webhook URL. In this lab, we have stored the webhook URL as an environment variable CHIME_WEBHOOK . In production use cases, we would recommend to store it securely using AWS Secrets Manager or any existing tools/vault that your team is using. When you have succcesfully created this Lambda function, let's add SNS as a trigger. Under Designer , click Add trigger and select SNS . Choose the SNS topic that you configured to receive IoT Device Defender alerts in. Remember to check box Enable trigger . Then click Add Now you can move to Test Alerts to test out this new intergration","title":"2.3 Configure Lambda function"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#3-receive-alerts-on-slack-channel","text":"You need to have a Slack channel in this session. To configure Device Defender send alerts to Slack channel, follow steps below","title":"3. Receive alerts on Slack channel"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#31-create-a-slack-incoming-webhook","text":"Start by setting up an incoming webhook integration . Choose the channel that Webhook will post messages to and click Add Incoming Webhooks integration Note down the Webhook URL and save it in your favourite text editor.","title":"3.1 Create a Slack Incoming WebHook"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#32-create-lambda-function-to-post-messages-to-slack","text":"Sign in to your AWS account. Go to Lambda console and create a Lambda function to post the message to the channel. Click Create function . Select Author from Scratch . Name this lambda function. Chose Python 3.8 for Runtime, and choose Create a new role with basic Lambda permissions for Execution Role. Click Create function Replace the code in Lambda function with Python code below. You can also download it from LambdaWebhookSlack.py . Remember to click Save import boto3 import json import logging import os from base64 import b64decode from urllib.request import Request , urlopen from urllib.error import URLError , HTTPError #The hook URL of Slcak channel HOOK_URL = os . environ [ 'slackHookURL' ] # The Slack channel to send a message to stored in the slackChannel environment variable SLACK_CHANNEL = os . environ [ 'slackChannel' ] logger = logging . getLogger () logger . setLevel ( logging . INFO ) def lambda_handler ( event , context ): logger . info ( \"Event: \" + str ( event )) message = json . loads ( event [ 'Records' ][ 0 ][ 'Sns' ][ 'Message' ]) logger . info ( \"Message: \" + str ( message )) thing = 'Thing name: ' + message [ 'thingName' ] securityprofile = 'Security profile: ' + message [ 'securityProfileName' ] behaviorname = 'Behavior name: ' + message [ 'behavior' ][ 'name' ] slack_message = { 'channel' : SLACK_CHANNEL , 'text' : \" You have a new Device Defender alert: %s , %s , %s \" % ( thing , securityprofile , behaviorname ) } req = Request ( HOOK_URL , json . dumps ( slack_message ) . encode ( 'utf-8' )) try : response = urlopen ( req ) response . read () logger . info ( \"Message posted to %s \" , slack_message [ 'channel' ]) except HTTPError as e : logger . error ( \"Request failed: %d %s \" , e . code , e . reason ) except URLError as e : logger . error ( \"Server connection failed: %s \" , e . reason ) Under Environment variables , click Edit and Add environment variable . You need to add two environmen variables slackHookURL and slackChannel . Provide values for these variables. Then click Save Now add SNS as a trigger for this function. Under SNS trigger , choose the SNS topic that Device Defender sends alerts to. From previous modules, a SNS topic BadIoTDevices-[CloudFormation stackname] was created. You can use this SNS topic or create a new one. Remember to check box Enable trigger . Then click Add Note: we recommend to protect your WebHookURL just like you pretect a password. You can use KMS to encrypt the URL of the webhook, and base-64 encode it before pasting it in to the code. An example can be found in Slack Integration Blueprint for Lambda Now you can move to Test Alerts to test out this new intergration","title":"3.2 Create Lambda function to post messages to Slack"},{"location":"Module%205%3A%20Send%20security%20alerts%20to%20your%20favourite%20messaging%20platform/#4-test-alerts","text":"To test if notification works, you can publish this test SNS message below using SNS console. This is an example alerts generated by Device Defender. Sign in to your AWS account, click SNS to go to SNS console On the left side, click on menu bar, and click Topics to see the list of SNS topics. In this module, select BadIoTDevices-[CloudFormation stackname] topic. Click Publish message on the top right corner. Copy the json blob below to Message body to send to the endpoint . Then click Publish message { \"violationEventTime\" : 1582745400000 , \"thingName\" : \"myIoTDevice\" , \"behavior\" : { \"criteria\" : { \"consecutiveDatapointsToClear\" : 1 , \"value\" : { \"count\" : 5000 }, \"consecutiveDatapointsToAlarm\" : 1 , \"comparisonOperator\" : \"greater-than\" }, \"name\" : \"messageSize\" , \"metric\" : \"aws:message-byte-size\" }, \"violationEventType\" : \"in-alarm\" , \"metricValue\" : { \"count\" : 26 }, \"violationId\" : \"123456789\" , \"securityProfileName\" : \"LargeMessageSize\" } Congratulations! You have succesfully sent Device Defender alerts in real time to your favourite communication tools.","title":"4. Test alerts"}]}