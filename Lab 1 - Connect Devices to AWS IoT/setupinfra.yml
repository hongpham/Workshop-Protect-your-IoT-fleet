AWSTemplateFormatVersion: 2010-09-09

Description: Provision an IoT Device and connect to AWS IoT

Resources:

  MyCertificate:
    Type: 'Custom::CreateCertificate'
    Properties:
      ServiceToken: !GetAtt CreateCertificate.Arn
   
  CreateCertificate:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create Cerfiticate for IoT Thing
      FunctionName: createCert
      Handler: create_cert.handler
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
      Role: !GetAtt CreateCertExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: example-bucket
        S3Key: registerDevice.zip 

  CreateCertExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: CreateCertRolePolicies
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 's3:GetObject'
                - 'secretsmanager:*'
                - 'kms:Decrypt'
                - 'iot:*'
                Resource: "*"

  IoTAuditRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderAudit
  
  StartIoTAudit:
    Type: 'Custom::IoTAudit'
    Properties:
      ServiceToken: !GetAtt TriggerAudit.Arn   

  TriggerAudit:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Start IoT On-Demand Audit for all Checks'
      FunctionName: createAudit
      Handler: create_audit.handler
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          AuditRoleArn: !GetAtt IoTAuditRole.Arn
      Role: !GetAtt TriggerAuditExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: example-bucket
        S3Key: startaudit.zip 

  TriggerAuditExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: TriggerAuditPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 's3:GetObject'
                - 'iot:*'
                Resource: "*"

  Thing01:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: 'SensorDevice01'
      AttributePayload: 
        Attributes: 
          SensorType: 'DHT22'

  Thing02:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: 'SensorDevice02'
      AttributePayload: 
        Attributes: 
          SensorType: 'DHT22'

  AttachCertToDevice01: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: 'SensorDevice01'
      Principal: !GetAtt MyCertificate.certARN

  AttachCertToDevice02: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: 'SensorDevice02'
      Principal: !GetAtt MyCertificate.certARN

  DeviceIAMPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub 'DevicePolicy${AWS::StackName}'
      PolicyDocument: {
        'Version': '2012-10-17',
        'Statement': [{
          'Effect': 'Allow',
          'Action': [
              'iot:*'
            ],
        'Resource': [
              '*'
            ] 
        }]
      }
  AttachPolicyToCert: 
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties: 
      PolicyName: !Sub 'DevicePolicy${AWS::StackName}' 
      Principal: !GetAtt MyCertificate.certARN

  Device01:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: example-bucket
        S3Key: device.zip 
      Runtime: python3.7
      FunctionName: Device01
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          topicname: 'temperature-device-01'
          devicename: 'SensorDevice01'
      Timeout: 5
      MemorySize: 512
      Handler: device.lambda_handler
      Role: !GetAtt DeviceFunctionRole.Arn

  Device02:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: example-bucket
        S3Key: device.zip 
      Runtime: python3.7
      FunctionName: Device02
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          topicname: 'temperature-device-02'
          devicename: 'SensorDevice02'
      Timeout: 5
      MemorySize: 512
      Handler: device.lambda_handler
      Role: !GetAtt DeviceFunctionRole.Arn

  DeviceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - !Ref AllowDeviceToConnectRole

  AllowDeviceToConnectRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowDeviceToConnect
            Effect: Allow
            Action:
              - secretsmanager:*
              - kms:Decrypt
              - iot:*
            Resource: "*"

  Iterator:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub
            - |-
              # replace with functionname
              import boto3
              client = boto3.client('lambda')
              def lambda_handler(event, context):
                  index = event['iterator']['index'] + 1
                  invokedevice1 = client.invoke(
                      FunctionName='${Device01}',
                      InvocationType='Event'
                  )
                  invokedevice2 = client.invoke(
                      FunctionName='${Device02}',
                      InvocationType='Event'
                  )
                  return {
                      'index': index,
                      'continue': index < event['iterator']['count'],
                      'count': event['iterator']['count']
                  }
            -  {StreamName: !Ref Device01}
      Runtime: python3.7
      FunctionName: IteratorFunction
      Timeout: 5
      MemorySize: 512
      Handler: index.lambda_handler
      TracingConfig:
        Mode: Active
      Role: !GetAtt IteratorExecutionRole.Arn

  IteratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        -
          PolicyName: InvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Device01.Arn
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Device02.Arn

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: 'LambdaSubMinute'
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Invoke Lambda every 10 seconds",
              "StartAt": "ConfigureCount",
              "States": {
                "ConfigureCount": {
                  "Type": "Pass",
                  "Result": {
                    "index": 0,
                    "count": 6
                  },
                  "ResultPath": "$.iterator",
                  "Next": "Iterator"
                },
                "Iterator": {
                  "Type": "Task",
                  "Resource": "${IteratorArn}",
                  "ResultPath": "$.iterator",
                  "Next": "IsCountReached"
                },
                "IsCountReached": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.iterator.continue",
                      "BooleanEquals": true,
                      "Next": "Wait"
                    }
                  ],
                  "Default": "Done"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "Iterator"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          -  {IteratorArn: !GetAtt Iterator.Arn}
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: !Join ["", ["states.", !Ref "AWS::Region", ".amazonaws.com"]]
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: StepFunctionsInvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Iterator.Arn

  Cron:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes Step Functions every minute
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        -
          Arn: !Ref StateMachine
          Id: 'LambdaSubMinute'
          RoleArn: !GetAtt CronExecutionRole.Arn

  CronExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: CloudWatchEventsStartStepFunctions
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StateMachine

Outputs:
  CertARN:
    Description: 'ARN of new Cert'
    Value: !GetAtt MyCertificate.certARN
  Thing01:
    Description: 'Thing name for first device'
    Value: !Ref Thing01
  Device01:
    Description: 'Name of Lambda function acting as Device 01'
    Value: !Ref Device01
  Thing02:
    Description: 'Thing name for second device'
    Value: !Ref Thing02
  Device02:
    Description: 'Name of Lambda function acting as Device 02'
    Value: !Ref Device02