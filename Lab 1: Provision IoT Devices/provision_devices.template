AWSTemplateFormatVersion: 2010-09-09

Description: This template deploys an t3a.nano EC2 instance in a VPC with one public subnet. It also deploys a Lambda function to create device certificates and register device to AWS IoT.

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      BucketName: myec2keypairstorage

  S3WaitHandle:
      Type: AWS::CloudFormation::WaitConditionHandle

  S3WaitCondition:
      Type: AWS::CloudFormation::WaitCondition
      DependsOn: S3Bucket
      Properties: 
        Handle: !Ref S3WaitHandle
        Timeout: "600"
        Count: 1

  CreateKeyPairCustomResource:
    Type: 'Custom::CreateKeyPair'
    Properties:
      ServiceToken: !GetAtt CreateKeyPair.Arn

        
  CreateKeyPair:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create Key Pair for EC2 instance
      FunctionName: CreateKeyPair
      Environment:
        Variables:
          BUCKETNAME: myec2keypairstorage
          KEYNAME: myEC2KeyPair
      Handler: create_key_pair.handler
      Role: !GetAtt CreateKeyPairExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: billing-phamh
        S3Key: createKeyPair.zip 

  CreateKeyPairExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  CreateKeyPairRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: CreateKeyPairRolePolicies
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 's3:PutObject'
            - 's3:GetObject'
            - 'ec2:CreateKeyPair'
            Resource: "*"
      Roles: 
        - !Ref CreateKeyPairExecutionRole     

  CreateIoTThingCustomResource:
    Type: 'Custom::CreateIoTThing'
    Properties:
      ServiceToken: !GetAtt CreateIoTThing.Arn


  CreateIoTThing:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create IoT Thing and it's associated cert
      FunctionName: CreateIoTThing
      MemorySize: 128
      Timeout: 5
      Handler: lambda_function.handler
      Role: !GetAtt CreateIoTThingExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: billing-phamh
        S3Key: createIoTThing.zip
        

  CreateIoTThingExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  CreateIoTThingRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: CreateIoTThingRolePolicies
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: 
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 's3:GetObject'
            - 'secretsmanager:*'
            - 'kms:Decrypt'
            - 'iot:*'
            Resource: "*"
      Roles: 
        - !Ref CreateIoTThingExecutionRole      

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Project
        Value: IoT

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: myInternetGateway

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "EC2SecurityGroup"
      GroupDescription: "Security group controls traffic to EC2 instances"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

      VpcId: !Ref VPC    
            
  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageID: 'ami-01e24be29428c15b2'
      InstanceType: 't3a.nano'
      KeyName: myEC2KeyPair
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      NetworkInterfaces:
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet: !Ref EC2SecurityGroup
        SubnetId: !Ref PublicSubnet
        DeleteOntermination: 'true'
  
  MyEC2Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  MyEC2RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "MyEC2RolePolicies"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
            - 'secretsmanager:ListSecrets'
            - 'kms:Decrypt'
            - 'secretsmanager:DescribeSecret'
            - 'secretsmanager:GetSecretValue'
            Resource: "*"
      Roles: 
        - !Ref MyEC2Role

  MyEC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - !Ref MyEC2Role 




