AWSTemplateFormatVersion: 2010-09-09

Description: Provision IoT Devices and connect to AWS IoT

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label:
          default: "S3 bucket"
        Parameters:
          - MyS3bucket
      - 
        Label:
          default: "IoT resources"
        Parameters:
          - DeviceName01
          - DeviceName02
          - DeviceName03
          - ThingName01
          - ThingName02
          - ThingName03
          - IoTTopic01
          - IoTTopic02
          - IoTTopic03

Parameters:
  MyS3bucket: # Provide S3 bucket name that has device.zip, registerDevice.zip, startAudit.zip
    Type: String 
    Description: name of S3 bucket that store deployment packages for Lambda function
  
  DeviceName01:
    Type: String
    Default: SensorDevice01
    Description: Name for Device 01
  DeviceName02:
    Type: String
    Default: SensorDevice02
    Description: Name for Device 02
  DeviceName03:
    Type: String
    Default: SensorDevice03
    Description: Name for Device 03

  ThingName01:
    Type: String
    Default: Thing01
    Description: IoT Thing name for SensorDevice01
  ThingName02:
    Type: String
    Default: Thing02
    Description: IoT Thing name for SensorDevice02
  ThingName03:
    Type: String
    Default: Thing03
    Description: IoT Thing name for SensorDevice03
  IoTTopic01:
    Type: String
    Default: temperature-device-01
    Description: IoT Topic receives data from SensorDevice01
  IoTTopic02:
    Type: String
    Default: temperature-device-02
    Description: IoT Topic receives data from SensorDevice02
  IoTTopic03:
    Type: String
    Default: temperature-device-03
    Description: IoT Topic receives data from SensorDevice03

Resources:
  MyCertificate:
    Type: 'Custom::CreateCertificate'
    Properties:
      ServiceToken: !GetAtt CreateCertificate.Arn
   
  CreateCertificate:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Create Cerfiticate for IoT Thing
      FunctionName: createCert
      Handler: create_cert.handler
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
      Role: !GetAtt CreateCertExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: !Ref MyS3bucket
        S3Key: registerDevice.zip # Please make sure prefix key is correct

  CreateCertExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: CreateCertRolePolicies
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 's3:GetObject'
                - 'secretsmanager:*'
                - 'kms:Decrypt'
                - 'iot:*'
                Resource: "*"

  IoTAuditRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderAudit
  
  StartIoTAudit:
    Type: 'Custom::IoTAudit'
    Properties:
      ServiceToken: !GetAtt TriggerAudit.Arn   

  TriggerAudit:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Start IoT On-Demand Audit for all Checks'
      FunctionName: createAudit
      Handler: create_audit.handler
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          AuditRoleArn: !GetAtt IoTAuditRole.Arn

      Role: !GetAtt TriggerAuditExecutionRole.Arn
      Runtime: nodejs12.x
      Code:
        S3Bucket: !Ref MyS3bucket
        S3Key: startaudit.zip # Please make sure prefix key is correct

  TriggerAuditExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: TriggerAuditPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: 
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 's3:GetObject'
                - 'iot:*'
                - 'iam:PassRole'
                Resource: "*"

  Thing01:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: !Ref ThingName01
      AttributePayload: 
        Attributes: 
          SensorType: 'DHT22'

  Thing02:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: !Ref ThingName02
      AttributePayload: 
        Attributes: 
          SensorType: 'DHT22'
  
  Thing03:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: !Ref ThingName03
      AttributePayload: 
        Attributes: 
          SensorType: 'DHT22'

  AttachCertToDevice01: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: !Ref ThingName01
      Principal: !GetAtt MyCertificate.certARN

  AttachCertToDevice02: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: !Ref ThingName02
      Principal: !GetAtt MyCertificate.certARN

  AttachCertToDevice03: 
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      ThingName: !Ref ThingName03
      Principal: !GetAtt MyCertificate.certARN

  DeviceIAMPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub 'DevicePolicy-${AWS::StackName}'
      PolicyDocument: {
        'Version': '2012-10-17',
        'Statement': [{
          'Effect': 'Allow',
          'Action': [
              'iot:*'
            ],
        'Resource': [
              '*'
            ] 
        }]
      }
  AttachPolicyToCert: 
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties: 
      PolicyName: !Sub 'DevicePolicy-${AWS::StackName}' 
      Principal: !GetAtt MyCertificate.certARN

  Device01:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref MyS3bucket
        S3Key: device.zip # Please make sure prefix key is correct
      Runtime: python3.7
      FunctionName: !Ref DeviceName01
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          topicname: !Ref IoTTopic01  
          thingname: !Ref ThingName01
      Timeout: 5
      MemorySize: 128
      Handler: device.lambda_handler
      Role: !GetAtt DeviceFunctionRole.Arn

  Device02:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref MyS3bucket
        S3Key: device.zip # Please make sure prefix key is correct
      Runtime: python3.7
      FunctionName: !Ref DeviceName02
      Environment:
        Variables:
          CFNstackname: !Ref AWS::StackName
          topicname: !Ref IoTTopic02
          thingname: !Ref ThingName02
      Timeout: 5
      MemorySize: 128
      Handler: device.lambda_handler
      Role: !GetAtt DeviceFunctionRole.Arn

  DeviceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - !Ref AllowDeviceToConnectRole

  AllowDeviceToConnectRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowDeviceToConnect
            Effect: Allow
            Action:
              - secretsmanager:*
              - kms:Decrypt
              - iot:*
            Resource: "*"

  Iterator:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub
            - |-
              # replace with functionname
              import boto3
              client = boto3.client('lambda')
              def lambda_handler(event, context):
                  index = event['iterator']['index'] + 1
                  invokedevice1 = client.invoke(
                      FunctionName='${Device01}',
                      InvocationType='Event'
                  )
                  invokedevice2 = client.invoke(
                      FunctionName='${Device02}',
                      InvocationType='Event'
                  )
                  return {
                      'index': index,
                      'continue': index < event['iterator']['count'],
                      'count': event['iterator']['count']
                  }
            -  {StreamName: !Ref Device01}
      Runtime: python3.7
      FunctionName: IteratorFunction
      Timeout: 5
      MemorySize: 512
      Handler: index.lambda_handler
      Role: !GetAtt IteratorExecutionRole.Arn

  IteratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        -
          PolicyName: InvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Device01.Arn
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Device02.Arn

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: 'LambdaSubMinute'
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Invoke Lambda every 10 seconds",
              "StartAt": "ConfigureCount",
              "States": {
                "ConfigureCount": {
                  "Type": "Pass",
                  "Result": {
                    "index": 0,
                    "count": 6
                  },
                  "ResultPath": "$.iterator",
                  "Next": "Iterator"
                },
                "Iterator": {
                  "Type": "Task",
                  "Resource": "${IteratorArn}",
                  "ResultPath": "$.iterator",
                  "Next": "IsCountReached"
                },
                "IsCountReached": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.iterator.continue",
                      "BooleanEquals": true,
                      "Next": "Wait"
                    }
                  ],
                  "Default": "Done"
                },
                "Wait": {
                  "Type": "Wait",
                  "Seconds": 10,
                  "Next": "Iterator"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          -  {IteratorArn: !GetAtt Iterator.Arn}
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: !Join ["", ["states.", !Ref "AWS::Region", ".amazonaws.com"]]
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: StepFunctionsInvokeLambda
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Iterator.Arn

  Cron:
    Type: AWS::Events::Rule
    Properties:
      Description: Executes Step Functions every minute
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        -
          Arn: !Ref StateMachine
          Id: 'LambdaSubMinute'
          RoleArn: !GetAtt CronExecutionRole.Arn

  CronExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        -
          PolicyName: CloudWatchEventsStartStepFunctions
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action: states:StartExecution
                Resource: !Ref StateMachine

  SNSTopicForAlert:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'BadIoTDevices-${AWS::StackName}' 

  SNSTopicRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction

  MoveThingToThingGroup:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          iot = boto3.client('iot')
          def lambda_handler(event, context):
            message = json.loads(event['Records'][0]['Sns']['Message']) 
            print("JSON: " + json.dumps(message)) 
            thing = message['thingName']
            addThing = iot.add_thing_to_thing_group(
                thingGroupName=os.environ['ThingGroupName'],
                thingName=thing,
            )
      Runtime: python3.7
      FunctionName: IsolateDevice
      Timeout: 5
      MemorySize: 128
      Handler: index.lambda_handler
      Role: !GetAtt MoveThingFunctionRole.Arn

  MoveThingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction

    # Creating VPC for Cloud9 instance  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
        CidrBlock: '10.192.0.0/16'
        Tags:
        - Key: Workshop
          Value: Workshop-Protect-your-IoT-fleet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs ]
        CidrBlock: '10.192.10.0/28'
        MapPublicIpOnLaunch: true
        Tags:
            - Key: Name
              Value: Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

  Device03Cloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Repositories: #can have multiple repos
      - RepositoryUrl: https://github.com/aws-samples/aws-iot-device-defender-agent-sdk-python.git
        PathComponent: workshop
      InstanceType: t3.small
      Name: !Ref DeviceName03
      SubnetId: !Ref PublicSubnet1


Outputs:
  CertARN:
    Description: 'ARN of new Cert'
    Value: !GetAtt MyCertificate.certARN
  SNSTopic:
    Description: SNS topic receives IoT Device Defender alerts
    Value: !Ref SNSTopicForAlert
  Workshop:
    Description: Workshop to learn how to protect your IoT fleet
    Value: Workshop-Protect-your-IoT-fleet